{% use 'bootstrap_4_layout.html.twig' %}

{# specific fieldtypes theming #}
{% use '@ezdesign/fieldtypes/edit/ezauthor.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezboolean.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezdatetime.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezrichtext.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezselection.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/eztime.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezdate.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezmedia.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezimage.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezbinaryfile.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezkeyword.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezgmaplocation.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezobjectrelationlist.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezobjectrelation.html.twig' %}
{% use '@ezdesign/fieldtypes/edit/ezuser.html.twig' %}

{% trans_default_domain 'content_edit' %}

{# general content editing theming #}

{%- block form_errors -%}
    {%- if errors|length > 0 -%}
        {%- for error in errors -%}
            <em class="ez-field-edit__error">{{ error.message }}</em>
        {%- endfor -%}
    {%- endif -%}
{%- endblock -%}

{% block form_row -%}
    {% set is_fieldtype = form.parent.vars.value.fieldDefinition.fieldTypeIdentifier is defined %}

    {% if is_fieldtype %}
        {{ block('form_row_fieldtype') }}
    {% else %}
        {{ block('form_row_subfield') }}
    {% endif %}
{%- endblock %}

{% block form_row_subfield -%}
    {% set wrapper_class = 'ez-data-source__field ez-data-source__field--' ~ name %}
    {% set wrapper_class = wrapper_class|replace({'___name___': name}) %}
    {% if required %}{% set wrapper_class = (wrapper_class ~ ' ez-data-source__field--required')|trim %}{% endif %}
    {% if errors|length > 0 %}{% set wrapper_class = (wrapper_class|default('') ~ ' is-invalid')|trim %}{% endif %}

    {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' ez-data-source__label')|trim}) %}
    {% set label_wrapper_attr = label_wrapper_attr|default({})|merge({'class': (label_wrapper_attr.class|default('') ~ ' ez-data-source__label-wrapper')|trim}) %}
    {% set attr = attr|merge({'class': (attr.class|default('') ~ ' ez-data-source__input')|trim}) %}
    {% set wrapper_attr = wrapper_attr|default({})|merge({class: (wrapper_attr.class|default('') ~ ' ' ~ wrapper_class)|trim}) %}
    {% set widget_wrapper_attr = widget_wrapper_attr|default({})|merge({class: (widget_wrapper_attr.class|default('') ~ ' ez-data-source__input-wrapper')|trim}) %}

    <div{% with { attr: wrapper_attr } %}{{ block('attributes') }}{% endwith %}>
        <div{% with { attr: label_wrapper_attr } %}{{ block('attributes') }}{% endwith %}>
            {{- block('form_label') }}
            {{- block('form_errors') -}}
        </div>
        <div{% with { attr: widget_wrapper_attr } %}{{ block('attributes') }}{% endwith %}>
            {{- form_widget(form, {'attr': attr}) -}}
        </div>
    </div>
{%- endblock %}

{% block form_row_fieldtype %}
    {% set fieldtype = form.parent %}
    {% set fieldtype_identifier = fieldtype.vars.value.fieldDefinition.fieldTypeIdentifier %}
    {% set translation_mode = fieldtype.vars.mainLanguageCode != fieldtype.vars.languageCode %}
    {% set fieldtype_is_not_translatable = translation_mode and not fieldtype.vars.value.fieldDefinition.isTranslatable %}

    {% set widget_wrapper_attr = widget_wrapper_attr|default({})|merge({'class': (widget_wrapper_attr.class|default('') ~ ' ez-field-edit__data')|trim}) %}
    {% set wrapper_class = 'ez-field-edit ez-field-edit--' ~ fieldtype_identifier %}
    {% if required %}{% set wrapper_class = (wrapper_class|default('') ~ ' ez-field-edit--required')|trim %}{% endif %}
    {% if errors|length > 0 %}{% set wrapper_class = (wrapper_class|default('') ~ ' is-invalid')|trim %}{% endif %}
    {% if fieldtype_is_not_translatable %}
        {% set wrapper_class = (wrapper_class|default('') ~ ' ez-field-edit--nontranslatable')|trim %}
        {% set attr = attr|merge({'readonly': 'readonly'}) %}
    {% endif %}

    {% set label_wrapper_attr = label_wrapper_attr|default({})|merge({'class': (label_wrapper_attr.class|default('') ~ 'ez-field-edit__label-wrapper')|trim}) %}
    {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' ez-field-edit__label')|trim}) %}
    {% set attr = attr|merge({'class': (attr.class|default('') ~ ' ez-data-source__input')|trim}) %}
    {% set wrapper_attr = wrapper_attr|default({})|merge({'class': (wrapper_attr.class|default('') ~ ' ' ~ wrapper_class)|trim}) %}

    {% set field_type_descriptions = fieldtype.vars.value.fieldDefinition.descriptions %}
    {% if field_type_descriptions[fieldtype.vars.languageCode] is defined %}
        {% set wrapper_attr = wrapper_attr|merge({'title': field_type_descriptions[fieldtype.vars.languageCode]}) %}
    {% endif %}

    <div {% with { attr: wrapper_attr } %}{{ block('attributes') }}{% endwith %}>
        <div{% with { attr: label_wrapper_attr } %}{{ block('attributes') }}{% endwith %}>
            {{ block('form_label') }}
            {{ block('form_errors') }}
        </div>

        {% if widget_container_block is defined %}
            {{ widget_container_block|raw }}
        {% else %}
            <div{% with { attr: widget_wrapper_attr } %}{{ block('attributes') }}{% endwith %}>
                <div class="ez-data-source">
                    {{- form_widget(form, {'attr': attr}) -}}
                </div>
            </div>
        {% endif %}

        {% if fieldtype_is_not_translatable %}
            <p class="ez-field-edit__nontranslatable text-secondary">{{ 'fieldtype.translation_is_disabled'|trans({'%fieldName%': label})|desc('Translation for %fieldName% is disabled') }}</p>
        {% endif %}
    </div>
{% endblock %}

{%- block form_widget_compound -%}
    {%- if form.parent is empty -%}
        {{ form_errors(form) }}
    {%- endif -%}
    {{- block('form_rows') -}}
    {{- form_rest(form) -}}
{%- endblock form_widget_compound -%}

{%- block number_widget -%}
    {%- set type = type|default('number') -%}
    {{ block('form_widget_simple') }}
{%- endblock number_widget -%}

{% block form_label -%}
    {% if label is not same as(false) -%}
        {%- if compound is defined and compound -%}
            {%- set element = 'legend' -%}
            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' col-form-label')|trim}) -%}
        {%- else -%}
            {%- set label_attr = label_attr|merge({for: id, class: (label_attr.class|default('') ~ ' form-control-label')|trim}) -%}
        {%- endif -%}
        {% if required -%}
            {% set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) %}
        {%- endif -%}
        {% if label is empty -%}
            {%- if label_format is not empty -%}
                {% set label = label_format|replace({
                    '%name%': name,
                    '%id%': id,
                }) %}
            {%- else -%}
                {% set label = name|humanize %}
            {%- endif -%}
        {%- endif -%}
        <{{ element|default('label') }}{% if label_attr %}{% with { attr: label_attr } %}{{ block('attributes') }}{% endwith %}{% endif %}>
        {{ translation_domain is same as(false) ? label : label|trans({}, translation_domain) }}
        </{{ element|default('label') }}>
    {%- endif -%}
{%- endblock form_label %}

{% block checkbox_radio_label -%}
    {#- Do not display the label if widget is not defined in order to prevent double label rendering -#}
    {%- if widget is defined -%}
        {% set is_parent_custom = parent_label_class is defined and ('checkbox-custom' in parent_label_class or 'radio-custom' in parent_label_class) %}
        {% set is_custom = label_attr.class is defined and ('checkbox-custom' in label_attr.class or 'radio-custom' in label_attr.class) %}
        {%- if is_parent_custom or is_custom -%}
            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' custom-control-label')|trim}) -%}
        {%- else %}
            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' form-check-label')|trim}) -%}
        {%- endif %}
        {%- if not compound -%}
            {% set label_attr = label_attr|merge({'for': id}) %}
        {%- endif -%}
        {%- if required -%}
            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' required')|trim}) -%}
        {%- endif -%}
        {%- if parent_label_class is defined -%}
            {%- set label_attr = label_attr|merge({class: (label_attr.class|default('') ~ ' ' ~ parent_label_class)|replace({'checkbox-inline': '', 'radio-inline': '', 'checkbox-custom': '', 'radio-custom': ''})|trim}) -%}
        {%- endif -%}
        {%- if label is not same as(false) and label is empty -%}
            {%- if label_format is not empty -%}
                {%- set label = label_format|replace({
                    '%name%': name,
                    '%id%': id,
                }) -%}
            {%- else -%}
                {%- set label = name|humanize -%}
            {%- endif -%}
        {%- endif -%}

        {{ widget|raw }}
        <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
        {{- label is not same as(false) ? (translation_domain is same as(false) ? label : label|trans({}, translation_domain)) -}}
        </label>
    {%- endif -%}
{%- endblock checkbox_radio_label %}
