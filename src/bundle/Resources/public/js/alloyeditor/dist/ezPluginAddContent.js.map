{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ezPluginAddContent.js","webpack:///webpack/bootstrap 60e7e1be7008dc92b7aa","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-add-content.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","57","global","CKEDITOR","plugins","createElement","doc","tagName","content","attributes","element","setAttributes","setHtml","fireEditorInteractionEvent","editor","event","target","$","fire","nativeEvent","selectionData","getSelectionData","isCustomTag","el","findOne","appendElement","elementPath","block","elements","insertIndex","contains","length","insertAfter","widgets","focused","wrapper","insertElement","addContentCommand","exec","data","document","focusElement","eZ","moveCaretToElement","add","requires","init","bind","addCommand","window"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,mBAAAD,KAEAD,EAAA,GAAAA,EAAA,OAA+BA,EAAA,iBAAAA,EAAA,qBAAiEA,EAAA,oCAAAC,MAC/F,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,MDgBMC,GACA,SAAU/B,EAAQD,EAASO,GAEjC,cEhFA,SAAU0B,GACN,IAAIA,EAAOC,SAASC,QAAQZ,IAAI,gBAAhC,CAUA,GAAMa,GAAgB,SAACC,EAAKC,EAASC,EAASC,GAC1C,GAAMC,GAAUJ,EAAID,cAAcE,EAKlC,OAHAG,GAAQC,cAAcF,GACtBC,EAAQE,QAAQJ,GAAoB,QAE7BE,GASLG,EAA6B,SAACC,EAAQJ,GACxC,GAAMK,IACFD,OAAQA,EACRE,OAAQN,EAAQO,EAChBhC,KAAM,mBAGV6B,GAAOI,KAAK,qBACRC,YAAaJ,EACbK,cAAeN,EAAOO,sBAIxBC,EAAc,SAACC,GAAD,QAAUA,EAAGC,QAAQ,kCAiBnCC,EAAgB,SAACX,EAAQJ,GAC3B,GAAMgB,GAAcZ,EAAOY,aAE3B,IAAIA,GAAeA,EAAYC,MAAO,CAClC,GAAMC,GAAWF,EAAYE,SACvBC,EAAeH,EAAYI,SAASR,GAAa,GAA8B,EAAtBM,EAASG,OAAS,CAEjFrB,GAAQsB,YAAYJ,EAASC,QACtBf,GAAOmB,SAAWnB,EAAOmB,QAAQC,QACxCxB,EAAQsB,YAAYlB,EAAOmB,QAAQC,QAAQC,SAE3CrB,EAAOsB,cAAc1B,IAIvB2B,GACFC,KAAM,SAASxB,EAAQyB,GACnB,GAAM7B,GAAUL,EAAcS,EAAO0B,SAAUD,EAAKhC,QAASgC,EAAK/B,QAAS+B,EAAK9B,YAC5EgC,EAAe/B,CAEnBe,GAAcX,EAAQ2B,GAElBF,EAAKE,eACLA,EAAe/B,EAAQc,QAAQe,EAAKE,eAGxC3B,EAAO4B,GAAGC,mBAAmB7B,EAAQ2B,GACrC5B,EAA2BC,EAAQ2B,IAc3CvC,GAAOC,SAASC,QAAQwC,IAAI,gBACxBC,UAAW,WAEXC,KAAM,SAAShC,GACXA,EAAO4B,GAAK5B,EAAO4B,OACnB5B,EAAO4B,GAAGjB,cAAgBA,EAAcsB,KAAKjC,EAAQA,GACrDA,EAAOkC,WAAW,eAAgBX,QAG3CY,WFyFkB","file":"ezPluginAddContent.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginAddContent\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginAddContent\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginAddContent\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginAddContent\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 57);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 57:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (global) {\n    if (global.CKEDITOR.plugins.get('ezaddcontent')) {\n        return;\n    }\n\n    /**\n     * Creates a given HTMLElement\n     *\n     * @method createElement\n     * @return HTMLElement\n     */\n    var createElement = function createElement(doc, tagName, content, attributes) {\n        var element = doc.createElement(tagName);\n\n        element.setAttributes(attributes);\n        element.setHtml(content ? content : '<br>');\n\n        return element;\n    };\n\n    /**\n     * Fires the `editorInteraction` event this is done to make sure the\n     * AlloyEditor's UI remains visible\n     *\n     * @method fireEditorInteractionEvent\n     */\n    var fireEditorInteractionEvent = function fireEditorInteractionEvent(editor, element) {\n        var event = {\n            editor: editor,\n            target: element.$,\n            name: 'eZAddContentDone'\n        };\n\n        editor.fire('editorInteraction', {\n            nativeEvent: event,\n            selectionData: editor.getSelectionData()\n        });\n    };\n\n    var isCustomTag = function isCustomTag(el) {\n        return !!el.findOne('[data-ezelement=\"eztemplate\"]');\n    };\n\n    /**\n     * Appends the element to the editor content. Depending on the editor's\n     * state, the element is added at a different place:\n     *\n     * - if nothing is selected, editor.insertElement is called and the element\n     *   is added at the beginning of the editor\n     * - if a block element is selected (not a widget), the element is added\n     *   after the element or after the first block in the element path (after\n     *   the ul element if a li has the focus)\n     * - if a widget has the focus, the element is added right after it\n     *\n     * @method appendElement\n     * @param {CKEDITOR.editor} editor\n     * @param {CKEDITOR.dom.element} element\n     */\n    var appendElement = function appendElement(editor, element) {\n        var elementPath = editor.elementPath();\n\n        if (elementPath && elementPath.block) {\n            var elements = elementPath.elements;\n            var insertIndex = !elementPath.contains(isCustomTag, true) ? elements.length - 2 : 0;\n\n            element.insertAfter(elements[insertIndex]);\n        } else if (editor.widgets && editor.widgets.focused) {\n            element.insertAfter(editor.widgets.focused.wrapper);\n        } else {\n            editor.insertElement(element);\n        }\n    };\n\n    var addContentCommand = {\n        exec: function exec(editor, data) {\n            var element = createElement(editor.document, data.tagName, data.content, data.attributes);\n            var focusElement = element;\n\n            appendElement(editor, focusElement);\n\n            if (data.focusElement) {\n                focusElement = element.findOne(data.focusElement);\n            }\n\n            editor.eZ.moveCaretToElement(editor, focusElement);\n            fireEditorInteractionEvent(editor, focusElement);\n        }\n    };\n\n    /**\n     * CKEditor plugin providing the eZAddContent command. This command\n     * allows to add content  to the editor content in the editable region\n     * pointed by the selector available under `eZ.editableRegion` in the\n     * configuration.\n     *\n     * @class ezaddcontent\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    global.CKEDITOR.plugins.add('ezaddcontent', {\n        requires: ['ezcaret'],\n\n        init: function init(editor) {\n            editor.eZ = editor.eZ || {};\n            editor.eZ.appendElement = appendElement.bind(editor, editor);\n            editor.addCommand('eZAddContent', addContentCommand);\n        }\n    });\n})(window);\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// ezPluginAddContent.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 60e7e1be7008dc92b7aa","(function(global) {\n    if (global.CKEDITOR.plugins.get('ezaddcontent')) {\n        return;\n    }\n\n    /**\n     * Creates a given HTMLElement\n     *\n     * @method createElement\n     * @return HTMLElement\n     */\n    const createElement = (doc, tagName, content, attributes) => {\n        const element = doc.createElement(tagName);\n\n        element.setAttributes(attributes);\n        element.setHtml(content ? content : '<br>');\n\n        return element;\n    };\n\n    /**\n     * Fires the `editorInteraction` event this is done to make sure the\n     * AlloyEditor's UI remains visible\n     *\n     * @method fireEditorInteractionEvent\n     */\n    const fireEditorInteractionEvent = (editor, element) => {\n        const event = {\n            editor: editor,\n            target: element.$,\n            name: 'eZAddContentDone',\n        };\n\n        editor.fire('editorInteraction', {\n            nativeEvent: event,\n            selectionData: editor.getSelectionData(),\n        });\n    };\n\n    const isCustomTag = (el) => !!el.findOne('[data-ezelement=\"eztemplate\"]');\n\n    /**\n     * Appends the element to the editor content. Depending on the editor's\n     * state, the element is added at a different place:\n     *\n     * - if nothing is selected, editor.insertElement is called and the element\n     *   is added at the beginning of the editor\n     * - if a block element is selected (not a widget), the element is added\n     *   after the element or after the first block in the element path (after\n     *   the ul element if a li has the focus)\n     * - if a widget has the focus, the element is added right after it\n     *\n     * @method appendElement\n     * @param {CKEDITOR.editor} editor\n     * @param {CKEDITOR.dom.element} element\n     */\n    const appendElement = (editor, element) => {\n        const elementPath = editor.elementPath();\n\n        if (elementPath && elementPath.block) {\n            const elements = elementPath.elements;\n            const insertIndex = !elementPath.contains(isCustomTag, true) ? elements.length - 2 : 0;\n\n            element.insertAfter(elements[insertIndex]);\n        } else if (editor.widgets && editor.widgets.focused) {\n            element.insertAfter(editor.widgets.focused.wrapper);\n        } else {\n            editor.insertElement(element);\n        }\n    };\n\n    const addContentCommand = {\n        exec: function(editor, data) {\n            const element = createElement(editor.document, data.tagName, data.content, data.attributes);\n            let focusElement = element;\n\n            appendElement(editor, focusElement);\n\n            if (data.focusElement) {\n                focusElement = element.findOne(data.focusElement);\n            }\n\n            editor.eZ.moveCaretToElement(editor, focusElement);\n            fireEditorInteractionEvent(editor, focusElement);\n        },\n    };\n\n    /**\n     * CKEditor plugin providing the eZAddContent command. This command\n     * allows to add content  to the editor content in the editable region\n     * pointed by the selector available under `eZ.editableRegion` in the\n     * configuration.\n     *\n     * @class ezaddcontent\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    global.CKEDITOR.plugins.add('ezaddcontent', {\n        requires: ['ezcaret'],\n\n        init: function(editor) {\n            editor.eZ = editor.eZ || {};\n            editor.eZ.appendElement = appendElement.bind(editor, editor);\n            editor.addCommand('eZAddContent', addContentCommand);\n        },\n    });\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-add-content.js"],"sourceRoot":""}