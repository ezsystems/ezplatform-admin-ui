{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ezPluginCustomTag.js","webpack:///webpack/bootstrap ac04ccdb5e78747f4a3a","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-custom-tag.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","60","global","CKEDITOR","plugins","add","requires","init","editor","widgets","defaults","draggable","template","requiredContent","upcast","element","attributes","insert","instance","dom","createFromHtml","output","wrapper","wrapElement","temp","documentFragment","getDocument","append","initOn","eZ","appendElement","getByElement","ready","fire","focus","edit","on","fireEditorInteraction","syncAlignment","getEzContentElement","getEzConfigElement","cancelEditEvents","setName","data","cancel","event","align","setAlignment","unsetAlignment","type","isAligned","setWidgetContent","content","ezContent","findOne","getFirst","next","getNext","remove","node","appendHtml","setConfig","key","value","valueElement","getValueElement","setText","getConfig","getText","clearConfig","config","firstChild","removeChild","evt","wrapperRegion","getWrapperRegion","target","$","pageX","left","pageY","top","height","nativeEvent","selectionData","region","moveAfter","insertAfter","moveBefore","insertBefore","scroll","getWindow","getScrollPosition","getClientRect","y","bottom","x","right","direction","SELECTION_TOP_TO_BOTTOM","window"],"mappings":"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","file":"ezPluginCustomTag.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginCustomTag\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginCustomTag\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginCustomTag\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginCustomTag\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 60);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 60:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (global) {\n    var DATA_ALIGNMENT_ATTR = 'ezalign';\n\n    if (CKEDITOR.plugins.get('ezcustomtag')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezcustomtag', {\n        requires: 'widget,ezaddcontent',\n\n        init: function init(editor) {\n            editor.widgets.add('ezcustomtag', {\n                defaults: {\n                    name: \"customtag\"\n                },\n                draggable: false,\n                template: '<div data-ezelement=\"eztemplate\" data-ezname=\"{name}\"></div>',\n                requiredContent: 'div',\n\n                upcast: function upcast(element) {\n                    return element.name === 'div' && element.attributes['data-ezelement'] === 'eztemplate' && !element.attributes['data-eztype'];\n                },\n\n                /**\n                 * Insert an `ezembed` widget in the editor. It overrides the\n                 * default implementation to make sure that in the case where an\n                 * embed widget is focused, a new one is added after it.\n                 *\n                 * @method insert\n                 */\n                insert: function insert() {\n                    var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults)),\n                        wrapper = editor.widgets.wrapElement(element, this.name),\n                        temp = new CKEDITOR.dom.documentFragment(wrapper.getDocument()),\n                        instance;\n\n                    temp.append(wrapper);\n                    editor.widgets.initOn(element, this.name);\n                    editor.eZ.appendElement(wrapper);\n\n                    instance = editor.widgets.getByElement(wrapper);\n                    instance.ready = true;\n                    instance.fire('ready');\n                    instance.focus();\n                },\n\n                /**\n                 * It's not possible to *edit* an embed widget in AlloyEditor,\n                 * so `edit` directly calls `insert` instead. This is needed\n                 * because by default, the CKEditor engine calls this method\n                 * when an embed widget has the focus and the `ezcustomtag` command\n                 * is executed. In AlloyEditor, we want to insert a new widget,\n                 * not to `edit` the focused widget as the editing process is\n                 * provided by the style toolbar.\n                 *\n                 * @method edit\n                 */\n                edit: function edit() {\n                    this.insert();\n                },\n\n                init: function init() {\n                    this.on('focus', this.fireEditorInteraction);\n                    this.syncAlignment();\n                    this.getEzContentElement();\n                    this.getEzConfigElement();\n                    this.cancelEditEvents();\n                },\n\n                /**\n                 * Sets the `name` of the custom tag.\n                 *\n                 * @method setName\n                 * @param {String} name\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setName: function setName(name) {\n                    this.element.data('ezname', name);\n\n                    return this;\n                },\n\n                /**\n                 * Cancels the widget events that trigger the `edit` event as\n                 * an embed widget can not be edited in a *CKEditor way*.\n                 *\n                 * @method cancelEditEvents\n                 */\n                cancelEditEvents: function cancelEditEvents() {\n                    var cancel = function cancel(event) {\n                        return event.cancel();\n                    };\n\n                    this.on('doubleclick', cancel, null, null, 5);\n                    this.on('key', cancel, null, null, 5);\n                },\n\n                /**\n                 * Initializes the alignment on the widget wrapper if the widget\n                 * is aligned.\n                 *\n                 * @method syncAlignment\n                 */\n                syncAlignment: function syncAlignment() {\n                    var align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n                    if (align) {\n                        this.setAlignment(align);\n                    } else {\n                        this.unsetAlignment();\n                    }\n                },\n\n                /**\n                 * Sets the alignment of the embed widget to `type` and fires\n                 * the corresponding `editorInteraction` event.\n                 *\n                 * @method setAlignment\n                 * @param {String} type\n                 */\n                setAlignment: function setAlignment(type) {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n                    this.element.data(DATA_ALIGNMENT_ATTR, type);\n                },\n\n                /**\n                 * Removes the alignment of the widget and fires the\n                 * corresponding `editorInteraction` event.\n                 *\n                 * @method unsetAlignment\n                 */\n                unsetAlignment: function unsetAlignment() {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n                    this.element.data(DATA_ALIGNMENT_ATTR, false);\n                },\n\n                /**\n                 * Checks whether the embed is aligned with `type` alignment.\n                 *\n                 * @method isAligned\n                 * @param {String} type\n                 * @return {Boolean}\n                 */\n                isAligned: function isAligned(type) {\n                    return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n                },\n\n                /**\n                 * Sets the widget content.\n                 *\n                 * @method setWidgetContent\n                 * @param {String|CKEDITOR.dom.node} content\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetContent: function setWidgetContent(content) {\n                    var ezContent = this.element.findOne('[data-ezelement=\"ezcontent\"]');\n                    var element = ezContent.getFirst();\n                    var next = void 0;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n\n                    if (content instanceof CKEDITOR.dom.node) {\n                        ezContent.append(content);\n                    } else {\n                        ezContent.appendHtml(content);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Sets a config value under the `key` for the custom tag.\n                 *\n                 * @method setConfig\n                 * @param {String} key\n                 * @param {String} value\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setConfig: function setConfig(key, value) {\n                    var valueElement = this.getValueElement(key);\n\n                    if (!valueElement) {\n                        valueElement = new CKEDITOR.dom.element('span');\n                        valueElement.data('ezelement', 'ezvalue');\n                        valueElement.data('ezvalue-key', key);\n                        this.getEzConfigElement().append(valueElement);\n                    }\n\n                    valueElement.setText(value);\n\n                    return this;\n                },\n\n                /**\n                 * Returns the config value for the `key` or empty string if the\n                 * config key is not found.\n                 *\n                 * @method getConfig\n                 * @return {String}\n                 */\n                getConfig: function getConfig(key) {\n                    var valueElement = this.getValueElement(key);\n\n                    return valueElement ? valueElement.getText() : '';\n                },\n\n                clearConfig: function clearConfig() {\n                    var config = this.getEzConfigElement();\n\n                    while (config.firstChild) {\n                        config.removeChild(config.firstChild);\n                    }\n                },\n\n                /**\n                 * Returns the Element holding the config under `key`\n                 *\n                 * @method getValueElement\n                 * @param {String} key\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getValueElement: function getValueElement(key) {\n                    return this.element.findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n                },\n\n                /**\n                 * Returns the element used as a container the config values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzConfigElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzConfigElement: function getEzConfigElement() {\n                    var config = this.element.findOne('[data-ezelement=\"ezconfig\"]');\n\n                    if (!config) {\n                        config = new CKEDITOR.dom.element('span');\n                        config.data('ezelement', 'ezconfig');\n                        this.element.append(config);\n                    }\n\n                    return config;\n                },\n\n                /**\n                 * Returns the element used as a container the content values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzContentElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzContentElement: function getEzContentElement() {\n                    var content = this.element.findOne('[data-ezelement=\"ezcontent\"]');\n\n                    if (!content) {\n                        content = new CKEDITOR.dom.element('div');\n                        content.data('ezelement', 'ezcontent');\n                        this.element.append(content, true);\n                    }\n\n                    return content;\n                },\n\n                /**\n                 * Fires the editorInteraction event so that AlloyEditor editor\n                 * UI remains visible and is updated. This method also computes\n                 * `selectionData.region` and the `pageX` and `pageY` properties\n                 * so that the add toolbar is correctly positioned on the\n                 * widget.\n                 *\n                 * @method fireEditorInteraction\n                 * @param {Object|String} evt this initial event info object or\n                 * the event name for which the `editorInteraction` is fired.\n                 */\n                fireEditorInteraction: function fireEditorInteraction(evt) {\n                    var wrapperRegion = this.getWrapperRegion();\n                    var name = evt.name || evt;\n                    var event = {\n                        editor: editor,\n                        target: this.element.$,\n                        name: 'widget' + name,\n                        pageX: wrapperRegion.left,\n                        pageY: wrapperRegion.top + wrapperRegion.height\n                    };\n\n                    editor.focus();\n                    this.focus();\n\n                    editor.fire('editorInteraction', {\n                        nativeEvent: event,\n                        selectionData: {\n                            element: this.element,\n                            region: wrapperRegion\n                        }\n                    });\n                },\n\n                /**\n                 * Moves the widget after the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveAfter: function moveAfter(element) {\n                    this.wrapper.insertAfter(element);\n                    this.fireEditorInteraction('moveAfter');\n                },\n\n                /**\n                 * Moves the widget before the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveBefore: function moveBefore(element) {\n                    this.wrapper.insertBefore(element);\n                    this.fireEditorInteraction('moveBefore');\n                },\n\n                /**\n                 * Returns the wrapper element region.\n                 *\n                 * @method getWrapperRegion\n                 * @private\n                 * @return {Object}\n                 */\n                getWrapperRegion: function getWrapperRegion() {\n                    var scroll = this.wrapper.getWindow().getScrollPosition();\n                    var region = this.wrapper.getClientRect();\n\n                    region.top += scroll.y;\n                    region.bottom += scroll.y;\n                    region.left += scroll.x;\n                    region.right += scroll.x;\n                    region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n                    return region;\n                }\n            });\n        }\n    });\n})(window);\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// ezPluginCustomTag.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 60);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ac04ccdb5e78747f4a3a","(function (global) {\n    const DATA_ALIGNMENT_ATTR = 'ezalign';\n\n    if (CKEDITOR.plugins.get('ezcustomtag')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezcustomtag', {\n        requires: 'widget,ezaddcontent',\n\n        init: function (editor) {\n            editor.widgets.add('ezcustomtag', {\n                defaults: {\n                    name: \"customtag\",\n                },\n                draggable: false,\n                template: '<div data-ezelement=\"eztemplate\" data-ezname=\"{name}\"></div>',\n                requiredContent: 'div',\n\n                upcast: (element) => {\n                    return (\n                        element.name === 'div' &&\n                        element.attributes['data-ezelement'] === 'eztemplate' &&\n                        !element.attributes['data-eztype']\n                    );\n                },\n\n                /**\n                 * Insert an `ezembed` widget in the editor. It overrides the\n                 * default implementation to make sure that in the case where an\n                 * embed widget is focused, a new one is added after it.\n                 *\n                 * @method insert\n                 */\n                insert: function () {\n                    var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults)),\n                        wrapper = editor.widgets.wrapElement(element, this.name),\n                        temp = new CKEDITOR.dom.documentFragment(wrapper.getDocument()),\n                        instance;\n\n                    temp.append(wrapper);\n                    editor.widgets.initOn(element, this.name);\n                    editor.eZ.appendElement(wrapper);\n\n                    instance = editor.widgets.getByElement(wrapper);\n                    instance.ready = true;\n                    instance.fire('ready');\n                    instance.focus();\n                },\n\n                /**\n                 * It's not possible to *edit* an embed widget in AlloyEditor,\n                 * so `edit` directly calls `insert` instead. This is needed\n                 * because by default, the CKEditor engine calls this method\n                 * when an embed widget has the focus and the `ezcustomtag` command\n                 * is executed. In AlloyEditor, we want to insert a new widget,\n                 * not to `edit` the focused widget as the editing process is\n                 * provided by the style toolbar.\n                 *\n                 * @method edit\n                 */\n                edit: function () {\n                    this.insert();\n                },\n\n                init: function () {\n                    this.on('focus', this.fireEditorInteraction);\n                    this.syncAlignment();\n                    this.getEzContentElement();\n                    this.getEzConfigElement();\n                    this.cancelEditEvents();\n                },\n\n                /**\n                 * Sets the `name` of the custom tag.\n                 *\n                 * @method setName\n                 * @param {String} name\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setName: function (name) {\n                    this.element.data('ezname', name);\n\n                    return this;\n                },\n\n                /**\n                 * Cancels the widget events that trigger the `edit` event as\n                 * an embed widget can not be edited in a *CKEditor way*.\n                 *\n                 * @method cancelEditEvents\n                 */\n                cancelEditEvents: function () {\n                    const cancel = (event) => event.cancel();\n\n                    this.on('doubleclick', cancel, null, null, 5);\n                    this.on('key', cancel, null, null, 5);\n                },\n\n                /**\n                 * Initializes the alignment on the widget wrapper if the widget\n                 * is aligned.\n                 *\n                 * @method syncAlignment\n                 */\n                syncAlignment: function () {\n                    const align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n                    if (align) {\n                        this.setAlignment(align);\n                    } else {\n                        this.unsetAlignment();\n                    }\n                },\n\n                /**\n                 * Sets the alignment of the embed widget to `type` and fires\n                 * the corresponding `editorInteraction` event.\n                 *\n                 * @method setAlignment\n                 * @param {String} type\n                 */\n                setAlignment: function (type) {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n                    this.element.data(DATA_ALIGNMENT_ATTR, type);\n                },\n\n                /**\n                 * Removes the alignment of the widget and fires the\n                 * corresponding `editorInteraction` event.\n                 *\n                 * @method unsetAlignment\n                 */\n                unsetAlignment: function () {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n                    this.element.data(DATA_ALIGNMENT_ATTR, false);\n                },\n\n                /**\n                 * Checks whether the embed is aligned with `type` alignment.\n                 *\n                 * @method isAligned\n                 * @param {String} type\n                 * @return {Boolean}\n                 */\n                isAligned: function (type) {\n                    return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n                },\n\n                /**\n                 * Sets the widget content.\n                 *\n                 * @method setWidgetContent\n                 * @param {String|CKEDITOR.dom.node} content\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetContent: function (content) {\n                    const ezContent = this.element.findOne('[data-ezelement=\"ezcontent\"]');\n                    let element = ezContent.getFirst();\n                    let next;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n\n                    if (content instanceof CKEDITOR.dom.node) {\n                        ezContent.append(content);\n                    } else {\n                        ezContent.appendHtml(content);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Sets a config value under the `key` for the custom tag.\n                 *\n                 * @method setConfig\n                 * @param {String} key\n                 * @param {String} value\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setConfig: function (key, value) {\n                    let valueElement = this.getValueElement(key);\n\n                    if (!valueElement) {\n                        valueElement = new CKEDITOR.dom.element('span');\n                        valueElement.data('ezelement', 'ezvalue');\n                        valueElement.data('ezvalue-key', key);\n                        this.getEzConfigElement().append(valueElement);\n                    }\n\n                    valueElement.setText(value);\n\n                    return this;\n                },\n\n                /**\n                 * Returns the config value for the `key` or empty string if the\n                 * config key is not found.\n                 *\n                 * @method getConfig\n                 * @return {String}\n                 */\n                getConfig: function (key) {\n                    const valueElement = this.getValueElement(key);\n\n                    return valueElement ? valueElement.getText() : '';\n                },\n\n                clearConfig: function () {\n                    const config = this.getEzConfigElement();\n\n                    while (config.firstChild) {\n                        config.removeChild(config.firstChild);\n                    }\n                },\n\n                /**\n                 * Returns the Element holding the config under `key`\n                 *\n                 * @method getValueElement\n                 * @param {String} key\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getValueElement: function (key) {\n                    return this.element.findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n                },\n\n                /**\n                 * Returns the element used as a container the config values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzConfigElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzConfigElement: function () {\n                    let config = this.element.findOne('[data-ezelement=\"ezconfig\"]');\n\n                    if (!config) {\n                        config = new CKEDITOR.dom.element('span');\n                        config.data('ezelement', 'ezconfig');\n                        this.element.append(config);\n                    }\n\n                    return config;\n                },\n\n                /**\n                 * Returns the element used as a container the content values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzContentElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzContentElement: function () {\n                    let content = this.element.findOne('[data-ezelement=\"ezcontent\"]');\n\n                    if (!content) {\n                        content = new CKEDITOR.dom.element('div');\n                        content.data('ezelement', 'ezcontent');\n                        this.element.append(content, true);\n                    }\n\n                    return content;\n                },\n\n                /**\n                 * Fires the editorInteraction event so that AlloyEditor editor\n                 * UI remains visible and is updated. This method also computes\n                 * `selectionData.region` and the `pageX` and `pageY` properties\n                 * so that the add toolbar is correctly positioned on the\n                 * widget.\n                 *\n                 * @method fireEditorInteraction\n                 * @param {Object|String} evt this initial event info object or\n                 * the event name for which the `editorInteraction` is fired.\n                 */\n                fireEditorInteraction: function (evt) {\n                    const wrapperRegion = this.getWrapperRegion();\n                    const name = evt.name || evt;\n                    const event = {\n                        editor: editor,\n                        target: this.element.$,\n                        name: 'widget' + name,\n                        pageX: wrapperRegion.left,\n                        pageY: wrapperRegion.top + wrapperRegion.height,\n                    };\n\n                    editor.focus();\n                    this.focus();\n\n                    editor.fire('editorInteraction', {\n                        nativeEvent: event,\n                        selectionData: {\n                            element: this.element,\n                            region: wrapperRegion,\n                        },\n                    });\n                },\n\n                /**\n                 * Moves the widget after the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveAfter: function (element) {\n                    this.wrapper.insertAfter(element);\n                    this.fireEditorInteraction('moveAfter');\n                },\n\n                /**\n                 * Moves the widget before the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveBefore: function (element) {\n                    this.wrapper.insertBefore(element);\n                    this.fireEditorInteraction('moveBefore');\n                },\n\n                /**\n                 * Returns the wrapper element region.\n                 *\n                 * @method getWrapperRegion\n                 * @private\n                 * @return {Object}\n                 */\n                getWrapperRegion: function () {\n                    const scroll = this.wrapper.getWindow().getScrollPosition();\n                    const region = this.wrapper.getClientRect();\n\n                    region.top += scroll.y;\n                    region.bottom += scroll.y;\n                    region.left += scroll.x;\n                    region.right += scroll.x;\n                    region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n                    return region;\n                },\n            });\n        },\n    });\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-custom-tag.js"],"sourceRoot":""}