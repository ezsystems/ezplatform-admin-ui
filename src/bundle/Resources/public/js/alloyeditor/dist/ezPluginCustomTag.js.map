{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ezPluginCustomTag.js","webpack:///webpack/bootstrap 60e7e1be7008dc92b7aa","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-custom-tag.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","64","_toConsumableArray","arr","Array","isArray","arr2","length","from","_slicedToArray","sliceIterator","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","err","TypeError","global","CKEDITOR","plugins","add","requires","init","editor","widgets","defaults","content","draggable","template","requiredContent","editables","selector","setNameFireEditorInteractionTimeout","setAlignmentFireEditorInteractionTimeout","unsetAlignmentFireEditorInteractionTimeout","setConfigFireEditorInteractionTimeout","clearConfigFireEditorInteractionTimeout","upcast","element","attributes","insert","instance","dom","createFromHtml","output","wrapper","wrapElement","temp","documentFragment","getDocument","append","initOn","eZ","appendElement","getByElement","ready","fire","focus","edit","on","fireEditorInteraction","syncAlignment","renderAttributes","renderHeader","getEzContentElement","getEzConfigElement","cancelEditEvents","toggleState","currentTarget","dataset","target","clearNode","node","getFirst","getNext","remove","customTagConfig","adminUiConfig","richTextCustomTags","getName","header","getHeader","label","appendHtml","attachButtonsListeners","_this","findOne","forEach","btn","$","addEventListener","bind","event","_this2","visibleElement","classes","entries","_ref","_ref2","key","className","classList","toggle","_this3","keys","reduce","total","attr","getConfig","setWidgetAttributes","setName","data","window","clearTimeout","setTimeout","cancel","align","setAlignment","unsetAlignment","type","isAligned","setWidgetContent","ezContent","setConfig","valueElement","getValueElement","setText","ezAttributes","getEzAttributesElement","getText","clearConfig","config","firstChild","removeChild","concat","getChildren","find","child","ezelement","contains","addClass","evt","wrapperRegion","getWrapperRegion","pageX","left","pageY","top","height","nativeEvent","selectionData","region","moveAfter","insertAfter","moveBefore","insertBefore","scroll","getWindow","getScrollPosition","getClientRect","y","bottom","x","right","direction","SELECTION_TOP_TO_BOTTOM"],"mappings":"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","file":"ezPluginCustomTag.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginCustomTag\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginCustomTag\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginCustomTag\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginCustomTag\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 64);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 64:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n(function (global) {\n    var DATA_ALIGNMENT_ATTR = 'ezalign';\n\n    if (CKEDITOR.plugins.get('ezcustomtag')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezcustomtag', {\n        requires: 'widget,ezaddcontent',\n\n        init: function init(editor) {\n            editor.widgets.add('ezcustomtag', {\n                defaults: {\n                    name: 'customtag',\n                    content: ''\n                },\n                draggable: false,\n                template: '<div class=\"ez-custom-tag ez-custom-tag--attributes-visible\" data-ezelement=\"eztemplate\" data-ezname=\"{name}\"><div data-ezelement=\"ezcontent\">{content}</div></div>',\n                requiredContent: 'div',\n                editables: {\n                    content: {\n                        selector: '[data-ezelement=\"ezcontent\"]'\n                    }\n                },\n                setNameFireEditorInteractionTimeout: null,\n                setAlignmentFireEditorInteractionTimeout: null,\n                unsetAlignmentFireEditorInteractionTimeout: null,\n                setConfigFireEditorInteractionTimeout: null,\n                clearConfigFireEditorInteractionTimeout: null,\n\n                upcast: function upcast(element) {\n                    return element.name === 'div' && element.attributes['data-ezelement'] === 'eztemplate' && !element.attributes['data-eztype'];\n                },\n\n                /**\n                 * Insert an `ezembed` widget in the editor. It overrides the\n                 * default implementation to make sure that in the case where an\n                 * embed widget is focused, a new one is added after it.\n                 *\n                 * @method insert\n                 */\n                insert: function insert() {\n                    var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults)),\n                        wrapper = editor.widgets.wrapElement(element, this.name),\n                        temp = new CKEDITOR.dom.documentFragment(wrapper.getDocument()),\n                        instance;\n\n                    temp.append(wrapper);\n                    editor.widgets.initOn(element, this.name);\n                    editor.eZ.appendElement(wrapper);\n\n                    instance = editor.widgets.getByElement(wrapper);\n                    instance.ready = true;\n                    instance.fire('ready');\n                    instance.focus();\n                },\n\n                /**\n                 * It's not possible to *edit* an embed widget in AlloyEditor,\n                 * so `edit` directly calls `insert` instead. This is needed\n                 * because by default, the CKEditor engine calls this method\n                 * when an embed widget has the focus and the `ezcustomtag` command\n                 * is executed. In AlloyEditor, we want to insert a new widget,\n                 * not to `edit` the focused widget as the editing process is\n                 * provided by the style toolbar.\n                 *\n                 * @method edit\n                 */\n                edit: function edit() {\n                    this.insert();\n                },\n\n                init: function init() {\n                    this.on('focus', this.fireEditorInteraction);\n                    this.syncAlignment();\n                    this.renderAttributes();\n                    this.renderHeader();\n                    this.getEzContentElement();\n                    this.getEzConfigElement();\n                    this.cancelEditEvents();\n                    this.toggleState({\n                        currentTarget: {\n                            dataset: {\n                                target: 'attributes'\n                            }\n                        }\n                    });\n                },\n\n                /**\n                 * Clear the node.\n                 *\n                 * @method clearNode\n                 * @param {Element} node\n                 */\n                clearNode: function clearNode(node) {\n                    var element = node.getFirst();\n                    var next = void 0;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n                },\n\n\n                /**\n                 * Renders the custom tag header.\n                 *\n                 * @method renderHeader\n                 */\n                renderHeader: function renderHeader() {\n                    var customTagConfig = global.eZ.adminUiConfig.richTextCustomTags[this.getName()];\n\n                    if (!customTagConfig) {\n                        return;\n                    }\n\n                    var header = this.getHeader();\n                    var template = '\\n                            <div class=\"ez-custom-tag__header-label\">\\n                                ' + customTagConfig.label + '\\n                            </div>\\n                            <div class=\"ez-custom-tag__header-btns\">\\n                                <button class=\"btn ez-custom-tag__header-btn ez-custom-tag__header-btn--attributes\" data-target=\"attributes\">\\n                                    <svg class=\"ez-icon ez-icon--small\">\\n                                        <use xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#list\"></use>\\n                                    </svg>\\n                                </button>\\n                                <button class=\"btn ez-custom-tag__header-btn ez-custom-tag__header-btn--content\" data-target=\"content\">\\n                                    <svg class=\"ez-icon ez-icon--small\">\\n                                        <use xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#edit\"></use>\\n                                    </svg>\\n                                </button>\\n                            </div>\\n                    ';\n\n                    this.clearNode(header);\n\n                    header.appendHtml(template);\n\n                    this.attachButtonsListeners();\n                },\n\n                /**\n                 * Attaches event listeners to toggle state buttons.\n                 *\n                 * @method attachButtonsListeners\n                 */\n                attachButtonsListeners: function attachButtonsListeners() {\n                    var _this = this;\n\n                    var header = this.getHeader();\n                    var attributesBtn = header.findOne('.ez-custom-tag__header-btn--attributes');\n                    var contentBtn = header.findOne('.ez-custom-tag__header-btn--content');\n\n                    [attributesBtn, contentBtn].forEach(function (btn) {\n                        return btn.$.addEventListener('click', _this.toggleState.bind(_this), false);\n                    });\n                },\n\n                /**\n                 * Toggles the custom tag state.\n                 *\n                 * @method toggleState\n                 * @param {Event} event\n                 */\n                toggleState: function toggleState(event) {\n                    var _this2 = this;\n\n                    var visibleElement = event.currentTarget.dataset.target;\n                    var classes = {\n                        attributes: 'ez-custom-tag--attributes-visible',\n                        content: 'ez-custom-tag--content-visible'\n                    };\n\n                    Object.entries(classes).forEach(function (_ref) {\n                        var _ref2 = _slicedToArray(_ref, 2),\n                            key = _ref2[0],\n                            className = _ref2[1];\n\n                        return _this2.element.$.classList.toggle(className, key === visibleElement);\n                    });\n                },\n\n                /**\n                 * Renders the custom tag attributes.\n                 *\n                 * @method renderAttributes\n                 */\n                renderAttributes: function renderAttributes() {\n                    var _this3 = this;\n\n                    var customTagConfig = global.eZ.adminUiConfig.richTextCustomTags[this.getName()];\n\n                    if (!customTagConfig) {\n                        return;\n                    }\n                    var attributes = Object.keys(customTagConfig.attributes).reduce(function (total, attr) {\n                        var value = _this3.getConfig(attr);\n\n                        return total + '<p>' + customTagConfig.attributes[attr].label + ': ' + value + '</p>';\n                    }, '');\n\n                    this.setWidgetAttributes(attributes);\n                },\n\n                /**\n                 * Sets the `name` of the custom tag.\n                 *\n                 * @method setName\n                 * @param {String} name\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setName: function setName(name) {\n                    this.element.data('ezname', name);\n                    window.clearTimeout(this.setNameFireEditorInteractionTimeout);\n                    this.setNameFireEditorInteractionTimeout = window.setTimeout(this.fireEditorInteraction.bind(this, 'nameUpdated'), 50);\n\n                    return this;\n                },\n\n                /**\n                 * Gets the `name` of the custom tag.\n                 *\n                 * @method getName\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                getName: function getName() {\n                    return this.element.data('ezname');\n                },\n\n                /**\n                 * Cancels the widget events that trigger the `edit` event as\n                 * an embed widget can not be edited in a *CKEditor way*.\n                 *\n                 * @method cancelEditEvents\n                 */\n                cancelEditEvents: function cancelEditEvents() {\n                    var cancel = function cancel(event) {\n                        return event.cancel();\n                    };\n\n                    this.on('doubleclick', cancel, null, null, 5);\n                    this.on('key', cancel, null, null, 5);\n                },\n\n                /**\n                 * Initializes the alignment on the widget wrapper if the widget\n                 * is aligned.\n                 *\n                 * @method syncAlignment\n                 */\n                syncAlignment: function syncAlignment() {\n                    var align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n                    if (align) {\n                        this.setAlignment(align);\n                    } else {\n                        this.unsetAlignment();\n                    }\n                },\n\n                /**\n                 * Sets the alignment of the embed widget to `type` and fires\n                 * the corresponding `editorInteraction` event.\n                 *\n                 * @method setAlignment\n                 * @param {String} type\n                 */\n                setAlignment: function setAlignment(type) {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n                    this.element.data(DATA_ALIGNMENT_ATTR, type);\n                    window.clearTimeout(this.setAlignmentFireEditorInteractionTimeout);\n                    this.setAlignmentFireEditorInteractionTimeout = window.setTimeout(this.fireEditorInteraction.bind(this, 'aligmentUpdated'), 50);\n                },\n\n                /**\n                 * Removes the alignment of the widget and fires the\n                 * corresponding `editorInteraction` event.\n                 *\n                 * @method unsetAlignment\n                 */\n                unsetAlignment: function unsetAlignment() {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n                    this.element.data(DATA_ALIGNMENT_ATTR, false);\n                    window.clearTimeout(this.unsetAlignmentFireEditorInteractionTimeout);\n                    this.unsetAlignmentFireEditorInteractionTimeout = window.setTimeout(this.fireEditorInteraction.bind(this, 'aligmentRemoved'), 50);\n                },\n\n                /**\n                 * Checks whether the embed is aligned with `type` alignment.\n                 *\n                 * @method isAligned\n                 * @param {String} type\n                 * @return {Boolean}\n                 */\n                isAligned: function isAligned(type) {\n                    return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n                },\n\n                /**\n                 * Sets the widget content.\n                 *\n                 * @method setWidgetContent\n                 * @param {String|CKEDITOR.dom.node} content\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetContent: function setWidgetContent(content) {\n                    var ezContent = this.getEzContentElement();\n                    var element = ezContent.getFirst();\n                    var next = void 0;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n\n                    if (content instanceof CKEDITOR.dom.node) {\n                        ezContent.append(content);\n                    } else {\n                        ezContent.appendHtml(content);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Sets a config value under the `key` for the custom tag.\n                 *\n                 * @method setConfig\n                 * @param {String} key\n                 * @param {String} value\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setConfig: function setConfig(key, value) {\n                    var valueElement = this.getValueElement(key);\n\n                    if (!valueElement) {\n                        valueElement = new CKEDITOR.dom.element('span');\n                        valueElement.data('ezelement', 'ezvalue');\n                        valueElement.data('ezvalue-key', key);\n                        this.getEzConfigElement().append(valueElement);\n                    }\n\n                    valueElement.setText(value);\n                    window.clearTimeout(this.setConfigFireEditorInteractionTimeout);\n                    this.setConfigFireEditorInteractionTimeout = window.setTimeout(this.fireEditorInteraction.bind(this, 'configUpdated'), 50);\n\n                    return this;\n                },\n\n                /**\n                 * Sets the widget attributes.\n                 *\n                 * @method setWidgetAttributes\n                 * @param {String|CKEDITOR.dom.node} attributes\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetAttributes: function setWidgetAttributes(attributes) {\n                    var ezAttributes = this.getEzAttributesElement();\n                    var element = ezAttributes.getFirst();\n                    var next = void 0;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n\n                    if (attributes instanceof CKEDITOR.dom.node) {\n                        ezAttributes.append(attributes);\n                    } else {\n                        ezAttributes.appendHtml(attributes);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Returns the config value for the `key` or empty string if the\n                 * config key is not found.\n                 *\n                 * @method getConfig\n                 * @return {String}\n                 */\n                getConfig: function getConfig(key) {\n                    var valueElement = this.getValueElement(key);\n\n                    return valueElement ? valueElement.getText() : '';\n                },\n\n                clearConfig: function clearConfig() {\n                    var config = this.getEzConfigElement();\n\n                    while (config.firstChild) {\n                        config.removeChild(config.firstChild);\n                    }\n\n                    window.clearTimeout(this.clearConfigFireEditorInteractionTimeout);\n                    this.clearConfigFireEditorInteractionTimeout = window.setTimeout(this.fireEditorInteraction.bind(this, 'configCleared'), 50);\n                },\n\n                /**\n                 * Returns the Element holding the config under `key`\n                 *\n                 * @method getValueElement\n                 * @param {String} key\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getValueElement: function getValueElement(key) {\n                    return this.getEzConfigElement().findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n                },\n\n                /**\n                 * Returns the element used as a container the config values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzConfigElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzConfigElement: function getEzConfigElement() {\n                    var config = [].concat(_toConsumableArray(this.element.getChildren().$)).find(function (child) {\n                        return child.dataset.ezelement === 'ezconfig';\n                    });\n\n                    if (!config) {\n                        config = new CKEDITOR.dom.element('span');\n                        config.data('ezelement', 'ezconfig');\n                        this.element.append(config);\n                    } else {\n                        config = new CKEDITOR.dom.element(config);\n                    }\n\n                    return config;\n                },\n\n                /**\n                 * Returns the element used as a container the content values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzContentElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzContentElement: function getEzContentElement() {\n                    var content = [].concat(_toConsumableArray(this.element.getChildren().$)).find(function (child) {\n                        return child.dataset.ezelement === 'ezcontent';\n                    });\n\n                    if (!content) {\n                        content = new CKEDITOR.dom.element('div');\n                        content.data('ezelement', 'ezcontent');\n                        this.element.append(content);\n                    } else {\n                        content = new CKEDITOR.dom.element(content);\n                    }\n\n                    return content;\n                },\n\n                /**\n                 * Returns the element used as a container the attributes values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzAttributesElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzAttributesElement: function getEzAttributesElement() {\n                    var attributes = [].concat(_toConsumableArray(this.element.getChildren().$)).find(function (child) {\n                        return child.dataset.ezelement === 'ezattributes';\n                    });\n\n                    if (!attributes) {\n                        attributes = new CKEDITOR.dom.element('div');\n                        attributes.data('ezelement', 'ezattributes');\n                        this.element.append(attributes, true);\n                    } else {\n                        attributes = new CKEDITOR.dom.element(attributes);\n                    }\n\n                    return attributes;\n                },\n\n                /**\n                 * Returns the element used as a container the header. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getHeader\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getHeader: function getHeader() {\n                    var header = [].concat(_toConsumableArray(this.element.getChildren().$)).find(function (child) {\n                        return child.classList.contains('ez-custom-tag__header');\n                    });\n\n                    if (!header) {\n                        header = new CKEDITOR.dom.element('div');\n                        header.addClass('ez-custom-tag__header');\n                        this.element.append(header, true);\n                    } else {\n                        header = new CKEDITOR.dom.element(header);\n                    }\n\n                    return header;\n                },\n\n                /**\n                 * Fires the editorInteraction event so that AlloyEditor editor\n                 * UI remains visible and is updated. This method also computes\n                 * `selectionData.region` and the `pageX` and `pageY` properties\n                 * so that the add toolbar is correctly positioned on the\n                 * widget.\n                 *\n                 * @method fireEditorInteraction\n                 * @param {Object|String} evt this initial event info object or\n                 * the event name for which the `editorInteraction` is fired.\n                 */\n                fireEditorInteraction: function fireEditorInteraction(evt) {\n                    var wrapperRegion = this.getWrapperRegion();\n                    var name = evt.name || evt;\n                    var event = {\n                        editor: editor,\n                        target: this.element.$,\n                        name: 'widget' + name,\n                        pageX: wrapperRegion.left,\n                        pageY: wrapperRegion.top + wrapperRegion.height\n                    };\n\n                    editor.focus();\n                    this.focus();\n\n                    editor.fire('editorInteraction', {\n                        nativeEvent: event,\n                        selectionData: {\n                            element: this.element,\n                            region: wrapperRegion\n                        }\n                    });\n                },\n\n                /**\n                 * Moves the widget after the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveAfter: function moveAfter(element) {\n                    this.wrapper.insertAfter(element);\n                    this.fireEditorInteraction('moveAfter');\n                },\n\n                /**\n                 * Moves the widget before the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveBefore: function moveBefore(element) {\n                    this.wrapper.insertBefore(element);\n                    this.fireEditorInteraction('moveBefore');\n                },\n\n                /**\n                 * Returns the wrapper element region.\n                 *\n                 * @method getWrapperRegion\n                 * @private\n                 * @return {Object}\n                 */\n                getWrapperRegion: function getWrapperRegion() {\n                    var scroll = this.wrapper.getWindow().getScrollPosition();\n                    var region = this.wrapper.getClientRect();\n\n                    region.top += scroll.y;\n                    region.bottom += scroll.y;\n                    region.left += scroll.x;\n                    region.right += scroll.x;\n                    region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n                    return region;\n                }\n            });\n        }\n    });\n})(window);\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// ezPluginCustomTag.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 64);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 60e7e1be7008dc92b7aa","(function(global) {\n    const DATA_ALIGNMENT_ATTR = 'ezalign';\n\n    if (CKEDITOR.plugins.get('ezcustomtag')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezcustomtag', {\n        requires: 'widget,ezaddcontent',\n\n        init: function(editor) {\n            editor.widgets.add('ezcustomtag', {\n                defaults: {\n                    name: 'customtag',\n                    content: '',\n                },\n                draggable: false,\n                template:\n                    '<div class=\"ez-custom-tag ez-custom-tag--attributes-visible\" data-ezelement=\"eztemplate\" data-ezname=\"{name}\"><div data-ezelement=\"ezcontent\">{content}</div></div>',\n                requiredContent: 'div',\n                editables: {\n                    content: {\n                        selector: '[data-ezelement=\"ezcontent\"]',\n                    },\n                },\n                setNameFireEditorInteractionTimeout: null,\n                setAlignmentFireEditorInteractionTimeout: null,\n                unsetAlignmentFireEditorInteractionTimeout: null,\n                setConfigFireEditorInteractionTimeout: null,\n                clearConfigFireEditorInteractionTimeout: null,\n\n                upcast: (element) => {\n                    return (\n                        element.name === 'div' &&\n                        element.attributes['data-ezelement'] === 'eztemplate' &&\n                        !element.attributes['data-eztype']\n                    );\n                },\n\n                /**\n                 * Insert an `ezembed` widget in the editor. It overrides the\n                 * default implementation to make sure that in the case where an\n                 * embed widget is focused, a new one is added after it.\n                 *\n                 * @method insert\n                 */\n                insert: function() {\n                    var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults)),\n                        wrapper = editor.widgets.wrapElement(element, this.name),\n                        temp = new CKEDITOR.dom.documentFragment(wrapper.getDocument()),\n                        instance;\n\n                    temp.append(wrapper);\n                    editor.widgets.initOn(element, this.name);\n                    editor.eZ.appendElement(wrapper);\n\n                    instance = editor.widgets.getByElement(wrapper);\n                    instance.ready = true;\n                    instance.fire('ready');\n                    instance.focus();\n                },\n\n                /**\n                 * It's not possible to *edit* an embed widget in AlloyEditor,\n                 * so `edit` directly calls `insert` instead. This is needed\n                 * because by default, the CKEditor engine calls this method\n                 * when an embed widget has the focus and the `ezcustomtag` command\n                 * is executed. In AlloyEditor, we want to insert a new widget,\n                 * not to `edit` the focused widget as the editing process is\n                 * provided by the style toolbar.\n                 *\n                 * @method edit\n                 */\n                edit: function() {\n                    this.insert();\n                },\n\n                init: function() {\n                    this.on('focus', this.fireEditorInteraction);\n                    this.syncAlignment();\n                    this.renderAttributes();\n                    this.renderHeader();\n                    this.getEzContentElement();\n                    this.getEzConfigElement();\n                    this.cancelEditEvents();\n                    this.toggleState({\n                        currentTarget: {\n                            dataset: {\n                                target: 'attributes',\n                            },\n                        },\n                    });\n                },\n\n                /**\n                 * Clear the node.\n                 *\n                 * @method clearNode\n                 * @param {Element} node\n                 */\n                clearNode(node) {\n                    let element = node.getFirst();\n                    let next;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n                },\n\n                /**\n                 * Renders the custom tag header.\n                 *\n                 * @method renderHeader\n                 */\n                renderHeader: function() {\n                    const customTagConfig = global.eZ.adminUiConfig.richTextCustomTags[this.getName()];\n\n                    if (!customTagConfig) {\n                        return;\n                    }\n\n                    const header = this.getHeader();\n                    const template = `\n                            <div class=\"ez-custom-tag__header-label\">\n                                ${customTagConfig.label}\n                            </div>\n                            <div class=\"ez-custom-tag__header-btns\">\n                                <button class=\"btn ez-custom-tag__header-btn ez-custom-tag__header-btn--attributes\" data-target=\"attributes\">\n                                    <svg class=\"ez-icon ez-icon--small\">\n                                        <use xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#list\"></use>\n                                    </svg>\n                                </button>\n                                <button class=\"btn ez-custom-tag__header-btn ez-custom-tag__header-btn--content\" data-target=\"content\">\n                                    <svg class=\"ez-icon ez-icon--small\">\n                                        <use xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#edit\"></use>\n                                    </svg>\n                                </button>\n                            </div>\n                    `;\n\n                    this.clearNode(header);\n\n                    header.appendHtml(template);\n\n                    this.attachButtonsListeners();\n                },\n\n                /**\n                 * Attaches event listeners to toggle state buttons.\n                 *\n                 * @method attachButtonsListeners\n                 */\n                attachButtonsListeners: function() {\n                    const header = this.getHeader();\n                    const attributesBtn = header.findOne('.ez-custom-tag__header-btn--attributes');\n                    const contentBtn = header.findOne('.ez-custom-tag__header-btn--content');\n\n                    [attributesBtn, contentBtn].forEach((btn) => btn.$.addEventListener('click', this.toggleState.bind(this), false));\n                },\n\n                /**\n                 * Toggles the custom tag state.\n                 *\n                 * @method toggleState\n                 * @param {Event} event\n                 */\n                toggleState: function(event) {\n                    const visibleElement = event.currentTarget.dataset.target;\n                    const classes = {\n                        attributes: 'ez-custom-tag--attributes-visible',\n                        content: 'ez-custom-tag--content-visible',\n                    };\n\n                    Object.entries(classes).forEach(([key, className]) =>\n                        this.element.$.classList.toggle(className, key === visibleElement)\n                    );\n                },\n\n                /**\n                 * Renders the custom tag attributes.\n                 *\n                 * @method renderAttributes\n                 */\n                renderAttributes: function() {\n                    const customTagConfig = global.eZ.adminUiConfig.richTextCustomTags[this.getName()];\n\n                    if (!customTagConfig) {\n                        return;\n                    }\n                    const attributes = Object.keys(customTagConfig.attributes).reduce((total, attr) => {\n                        const value = this.getConfig(attr);\n\n                        return `${total}<p>${customTagConfig.attributes[attr].label}: ${value}</p>`;\n                    }, '');\n\n                    this.setWidgetAttributes(attributes);\n                },\n\n                /**\n                 * Sets the `name` of the custom tag.\n                 *\n                 * @method setName\n                 * @param {String} name\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setName: function(name) {\n                    this.element.data('ezname', name);\n                    window.clearTimeout(this.setNameFireEditorInteractionTimeout);\n                    this.setNameFireEditorInteractionTimeout = window.setTimeout(this.fireEditorInteraction.bind(this, 'nameUpdated'), 50);\n\n                    return this;\n                },\n\n                /**\n                 * Gets the `name` of the custom tag.\n                 *\n                 * @method getName\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                getName: function() {\n                    return this.element.data('ezname');\n                },\n\n                /**\n                 * Cancels the widget events that trigger the `edit` event as\n                 * an embed widget can not be edited in a *CKEditor way*.\n                 *\n                 * @method cancelEditEvents\n                 */\n                cancelEditEvents: function() {\n                    const cancel = (event) => event.cancel();\n\n                    this.on('doubleclick', cancel, null, null, 5);\n                    this.on('key', cancel, null, null, 5);\n                },\n\n                /**\n                 * Initializes the alignment on the widget wrapper if the widget\n                 * is aligned.\n                 *\n                 * @method syncAlignment\n                 */\n                syncAlignment: function() {\n                    const align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n                    if (align) {\n                        this.setAlignment(align);\n                    } else {\n                        this.unsetAlignment();\n                    }\n                },\n\n                /**\n                 * Sets the alignment of the embed widget to `type` and fires\n                 * the corresponding `editorInteraction` event.\n                 *\n                 * @method setAlignment\n                 * @param {String} type\n                 */\n                setAlignment: function(type) {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n                    this.element.data(DATA_ALIGNMENT_ATTR, type);\n                    window.clearTimeout(this.setAlignmentFireEditorInteractionTimeout);\n                    this.setAlignmentFireEditorInteractionTimeout = window.setTimeout(\n                        this.fireEditorInteraction.bind(this, 'aligmentUpdated'),\n                        50\n                    );\n                },\n\n                /**\n                 * Removes the alignment of the widget and fires the\n                 * corresponding `editorInteraction` event.\n                 *\n                 * @method unsetAlignment\n                 */\n                unsetAlignment: function() {\n                    this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n                    this.element.data(DATA_ALIGNMENT_ATTR, false);\n                    window.clearTimeout(this.unsetAlignmentFireEditorInteractionTimeout);\n                    this.unsetAlignmentFireEditorInteractionTimeout = window.setTimeout(\n                        this.fireEditorInteraction.bind(this, 'aligmentRemoved'),\n                        50\n                    );\n                },\n\n                /**\n                 * Checks whether the embed is aligned with `type` alignment.\n                 *\n                 * @method isAligned\n                 * @param {String} type\n                 * @return {Boolean}\n                 */\n                isAligned: function(type) {\n                    return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n                },\n\n                /**\n                 * Sets the widget content.\n                 *\n                 * @method setWidgetContent\n                 * @param {String|CKEDITOR.dom.node} content\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetContent: function(content) {\n                    const ezContent = this.getEzContentElement();\n                    let element = ezContent.getFirst();\n                    let next;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n\n                    if (content instanceof CKEDITOR.dom.node) {\n                        ezContent.append(content);\n                    } else {\n                        ezContent.appendHtml(content);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Sets a config value under the `key` for the custom tag.\n                 *\n                 * @method setConfig\n                 * @param {String} key\n                 * @param {String} value\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setConfig: function(key, value) {\n                    let valueElement = this.getValueElement(key);\n\n                    if (!valueElement) {\n                        valueElement = new CKEDITOR.dom.element('span');\n                        valueElement.data('ezelement', 'ezvalue');\n                        valueElement.data('ezvalue-key', key);\n                        this.getEzConfigElement().append(valueElement);\n                    }\n\n                    valueElement.setText(value);\n                    window.clearTimeout(this.setConfigFireEditorInteractionTimeout);\n                    this.setConfigFireEditorInteractionTimeout = window.setTimeout(\n                        this.fireEditorInteraction.bind(this, 'configUpdated'),\n                        50\n                    );\n\n                    return this;\n                },\n\n                /**\n                 * Sets the widget attributes.\n                 *\n                 * @method setWidgetAttributes\n                 * @param {String|CKEDITOR.dom.node} attributes\n                 * @return {CKEDITOR.plugins.widget}\n                 */\n                setWidgetAttributes: function(attributes) {\n                    const ezAttributes = this.getEzAttributesElement();\n                    let element = ezAttributes.getFirst();\n                    let next;\n\n                    while (element) {\n                        next = element.getNext();\n                        element.remove();\n                        element = next;\n                    }\n\n                    if (attributes instanceof CKEDITOR.dom.node) {\n                        ezAttributes.append(attributes);\n                    } else {\n                        ezAttributes.appendHtml(attributes);\n                    }\n\n                    return this;\n                },\n\n                /**\n                 * Returns the config value for the `key` or empty string if the\n                 * config key is not found.\n                 *\n                 * @method getConfig\n                 * @return {String}\n                 */\n                getConfig: function(key) {\n                    const valueElement = this.getValueElement(key);\n\n                    return valueElement ? valueElement.getText() : '';\n                },\n\n                clearConfig: function() {\n                    const config = this.getEzConfigElement();\n\n                    while (config.firstChild) {\n                        config.removeChild(config.firstChild);\n                    }\n\n                    window.clearTimeout(this.clearConfigFireEditorInteractionTimeout);\n                    this.clearConfigFireEditorInteractionTimeout = window.setTimeout(\n                        this.fireEditorInteraction.bind(this, 'configCleared'),\n                        50\n                    );\n                },\n\n                /**\n                 * Returns the Element holding the config under `key`\n                 *\n                 * @method getValueElement\n                 * @param {String} key\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getValueElement: function(key) {\n                    return this.getEzConfigElement().findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n                },\n\n                /**\n                 * Returns the element used as a container the config values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzConfigElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzConfigElement: function() {\n                    let config = [...this.element.getChildren().$].find((child) => child.dataset.ezelement === 'ezconfig');\n\n                    if (!config) {\n                        config = new CKEDITOR.dom.element('span');\n                        config.data('ezelement', 'ezconfig');\n                        this.element.append(config);\n                    } else {\n                        config = new CKEDITOR.dom.element(config);\n                    }\n\n                    return config;\n                },\n\n                /**\n                 * Returns the element used as a container the content values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzContentElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzContentElement: function() {\n                    let content = [...this.element.getChildren().$].find((child) => child.dataset.ezelement === 'ezcontent');\n\n                    if (!content) {\n                        content = new CKEDITOR.dom.element('div');\n                        content.data('ezelement', 'ezcontent');\n                        this.element.append(content);\n                    } else {\n                        content = new CKEDITOR.dom.element(content);\n                    }\n\n                    return content;\n                },\n\n                /**\n                 * Returns the element used as a container the attributes values. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getEzAttributesElement\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getEzAttributesElement: function() {\n                    let attributes = [...this.element.getChildren().$].find((child) => child.dataset.ezelement === 'ezattributes');\n\n                    if (!attributes) {\n                        attributes = new CKEDITOR.dom.element('div');\n                        attributes.data('ezelement', 'ezattributes');\n                        this.element.append(attributes, true);\n                    } else {\n                        attributes = new CKEDITOR.dom.element(attributes);\n                    }\n\n                    return attributes;\n                },\n\n                /**\n                 * Returns the element used as a container the header. if\n                 * it does not exist, it is created.\n                 *\n                 * @method getHeader\n                 * @return {CKEDITOR.dom.element}\n                 */\n                getHeader: function() {\n                    let header = [...this.element.getChildren().$].find((child) => child.classList.contains('ez-custom-tag__header'));\n\n                    if (!header) {\n                        header = new CKEDITOR.dom.element('div');\n                        header.addClass('ez-custom-tag__header');\n                        this.element.append(header, true);\n                    } else {\n                        header = new CKEDITOR.dom.element(header);\n                    }\n\n                    return header;\n                },\n\n                /**\n                 * Fires the editorInteraction event so that AlloyEditor editor\n                 * UI remains visible and is updated. This method also computes\n                 * `selectionData.region` and the `pageX` and `pageY` properties\n                 * so that the add toolbar is correctly positioned on the\n                 * widget.\n                 *\n                 * @method fireEditorInteraction\n                 * @param {Object|String} evt this initial event info object or\n                 * the event name for which the `editorInteraction` is fired.\n                 */\n                fireEditorInteraction: function(evt) {\n                    const wrapperRegion = this.getWrapperRegion();\n                    const name = evt.name || evt;\n                    const event = {\n                        editor: editor,\n                        target: this.element.$,\n                        name: 'widget' + name,\n                        pageX: wrapperRegion.left,\n                        pageY: wrapperRegion.top + wrapperRegion.height,\n                    };\n\n                    editor.focus();\n                    this.focus();\n\n                    editor.fire('editorInteraction', {\n                        nativeEvent: event,\n                        selectionData: {\n                            element: this.element,\n                            region: wrapperRegion,\n                        },\n                    });\n                },\n\n                /**\n                 * Moves the widget after the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveAfter: function(element) {\n                    this.wrapper.insertAfter(element);\n                    this.fireEditorInteraction('moveAfter');\n                },\n\n                /**\n                 * Moves the widget before the given element. It also fires the\n                 * `editorInteraction` event so that the UI can respond to that\n                 * change.\n                 *\n                 * @method moveAfter\n                 * @param {CKEDITOR.dom.element} element\n                 */\n                moveBefore: function(element) {\n                    this.wrapper.insertBefore(element);\n                    this.fireEditorInteraction('moveBefore');\n                },\n\n                /**\n                 * Returns the wrapper element region.\n                 *\n                 * @method getWrapperRegion\n                 * @private\n                 * @return {Object}\n                 */\n                getWrapperRegion: function() {\n                    const scroll = this.wrapper.getWindow().getScrollPosition();\n                    const region = this.wrapper.getClientRect();\n\n                    region.top += scroll.y;\n                    region.bottom += scroll.y;\n                    region.left += scroll.x;\n                    region.right += scroll.x;\n                    region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n                    return region;\n                },\n            });\n        },\n    });\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-custom-tag.js"],"sourceRoot":""}