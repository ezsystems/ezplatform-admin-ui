{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ezPluginRemoveBlock.js","webpack:///webpack/bootstrap 0d5736e542ecb6a9a644","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-remove-block.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","57","global","CKEDITOR","plugins","removeBlockCommand","moveCaretToElement","editor","element","caretElement","eZ","findCaretElement","fireEditorInteraction","newFocus","event","target","$","fire","nativeEvent","selectionData","getSelectionData","changeFocus","widget","widgets","getByElement","focus","exec","data","toRemove","elementPath","block","focused","wrapper","getNext","type","NODE_TEXT","hasAttribute","getPrevious","remove","add","requires","init","addCommand","window"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,oBAAAD,KAEAD,EAAA,GAAAA,EAAA,OAA+BA,EAAA,iBAAAA,EAAA,qBAAiEA,EAAA,qCAAAC,MAC/F,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,MDgBMC,GACA,SAAU/B,EAAQD,EAASO,GAEjC,cEhFA,SAAW0B,GACP,IAAIC,SAASC,QAAQZ,IAAI,iBAAzB,CAIA,GAAMa,IAQFC,mBAAoB,SAAUC,EAAQC,GAClC,GAAMC,GAAeF,EAAOG,GAAGC,iBAAiBH,EAEhDD,GAAOG,GAAGJ,mBAAmBC,EAAQE,GACrCnC,KAAKsC,sBAAsBL,EAAQE,IAYvCG,sBAAuB,SAAUL,EAAQM,GACrC,GAAMC,IACFP,OAAQA,EACRQ,OAAQF,EAASG,EACjB/B,KAAM,oBAGVsB,GAAOU,KAAK,qBACRC,YAAaJ,EACbK,cAAeZ,EAAOa,sBAa9BC,YAAa,SAAUd,EAAQM,GAC3B,GAAMS,GAASf,EAAOgB,QAAQC,aAAaX,EAEvCS,GACAA,EAAOG,QAEPnD,KAAKgC,mBAAmBC,EAAQM,IAIxCa,KAAM,SAAUnB,EAAQoB,GACpB,GAAIC,GAAWrB,EAAOsB,cAAcC,MAChCjB,QAECe,KAGDA,EAAWrB,EAAOgB,QAAQQ,QAAQC,SAGtCnB,EAAWe,EAASK,UAEfpB,GAAYA,EAASqB,OAAS/B,SAASgC,YAAatB,EAASuB,aAAa,mBAK3EvB,EAAWe,EAASS,eAGxBT,EAASU,SAELzB,GACAvC,KAAK+C,YAAYd,EAAQM,IAcrCV,UAASC,QAAQmC,IAAI,iBACjBC,UAAW,SAAU,WAErBC,KAAM,SAAClC,GAAD,MAAYA,GAAOmC,WAAW,gBAAiBrC,QAE1DsC,WFyFkB","file":"ezPluginRemoveBlock.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginRemoveBlock\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginRemoveBlock\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginRemoveBlock\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginRemoveBlock\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 57);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 57:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (global) {\n    if (CKEDITOR.plugins.get('ezremoveblock')) {\n        return;\n    }\n\n    var removeBlockCommand = {\n        /**\n         * Moves the caret to the element\n         *\n         * @method moveCaretToElement\n         * @param {CKEDITOR.editor} editor\n         * @param {CKEDITOR.dom.element} element\n         */\n        moveCaretToElement: function moveCaretToElement(editor, element) {\n            var caretElement = editor.eZ.findCaretElement(element);\n\n            editor.eZ.moveCaretToElement(editor, caretElement);\n            this.fireEditorInteraction(editor, caretElement);\n        },\n\n        /**\n         * Fires the editorInteraction event so that AlloyEditor's UI is updated\n         * for the newly focused element\n         *\n         * @method fireEditorInteraction\n         * @param {CKEDITOR.editor} editor\n         * @param {CKEDITOR.dom.element} removedElement\n         * @param {CKEDITOR.dom.element} newFocus\n         */\n        fireEditorInteraction: function fireEditorInteraction(editor, newFocus) {\n            var event = {\n                editor: editor,\n                target: newFocus.$,\n                name: 'eZRemoveBlockDone'\n            };\n\n            editor.fire('editorInteraction', {\n                nativeEvent: event,\n                selectionData: editor.getSelectionData()\n            });\n        },\n\n        /**\n         * Changes the focused element in the editor to the given newFocus\n         * element\n         *\n         * @param {CKEDITOR.editor} editor\n         * @param {CKEDITOR.dom.element} newFocus\n         * @protected\n         * @method changeFocus\n         */\n        changeFocus: function changeFocus(editor, newFocus) {\n            var widget = editor.widgets.getByElement(newFocus);\n\n            if (widget) {\n                widget.focus();\n            } else {\n                this.moveCaretToElement(editor, newFocus);\n            }\n        },\n\n        exec: function exec(editor, data) {\n            var toRemove = editor.elementPath().block;\n            var newFocus = void 0;\n\n            if (!toRemove) {\n                // path.block is null when a widget is focused so the element to\n                // remove is the focused widget wrapper.\n                toRemove = editor.widgets.focused.wrapper;\n            }\n\n            newFocus = toRemove.getNext();\n\n            if (!newFocus || newFocus.type === CKEDITOR.NODE_TEXT || newFocus.hasAttribute('data-cke-temp')) {\n                // the data-cke-temp element is added by the Widget plugin for\n                // internal purposes but it exposes no API to handle it, so we\n                // are forced to manually check if newFocus is this element\n                // see https://jira.ez.no/browse/EZP-26016\n                newFocus = toRemove.getPrevious();\n            }\n\n            toRemove.remove();\n\n            if (newFocus) {\n                this.changeFocus(editor, newFocus);\n            }\n        }\n    };\n\n    /**\n     * CKEditor plugin providing the eZRemoveBlock command. This command\n     * allows to remove the block element holding the caret or the focused\n     * widget\n     *\n     * @class ezremoveblock\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezremoveblock', {\n        requires: ['widget', 'ezcaret'],\n\n        init: function init(editor) {\n            return editor.addCommand('eZRemoveBlock', removeBlockCommand);\n        }\n    });\n})(window);\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// ezPluginRemoveBlock.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0d5736e542ecb6a9a644","(function (global) {\n    if (CKEDITOR.plugins.get('ezremoveblock')) {\n        return;\n    }\n\n    const removeBlockCommand = {\n        /**\n         * Moves the caret to the element\n         *\n         * @method moveCaretToElement\n         * @param {CKEDITOR.editor} editor\n         * @param {CKEDITOR.dom.element} element\n         */\n        moveCaretToElement: function (editor, element) {\n            const caretElement = editor.eZ.findCaretElement(element);\n\n            editor.eZ.moveCaretToElement(editor, caretElement);\n            this.fireEditorInteraction(editor, caretElement);\n        },\n\n        /**\n         * Fires the editorInteraction event so that AlloyEditor's UI is updated\n         * for the newly focused element\n         *\n         * @method fireEditorInteraction\n         * @param {CKEDITOR.editor} editor\n         * @param {CKEDITOR.dom.element} removedElement\n         * @param {CKEDITOR.dom.element} newFocus\n         */\n        fireEditorInteraction: function (editor, newFocus) {\n            const event = {\n                editor: editor,\n                target: newFocus.$,\n                name: 'eZRemoveBlockDone',\n            };\n\n            editor.fire('editorInteraction', {\n                nativeEvent: event,\n                selectionData: editor.getSelectionData(),\n            });\n        },\n\n        /**\n         * Changes the focused element in the editor to the given newFocus\n         * element\n         *\n         * @param {CKEDITOR.editor} editor\n         * @param {CKEDITOR.dom.element} newFocus\n         * @protected\n         * @method changeFocus\n         */\n        changeFocus: function (editor, newFocus) {\n            const widget = editor.widgets.getByElement(newFocus);\n\n            if (widget) {\n                widget.focus();\n            } else {\n                this.moveCaretToElement(editor, newFocus);\n            }\n       },\n\n        exec: function (editor, data) {\n            let toRemove = editor.elementPath().block;\n            let newFocus;\n\n            if (!toRemove) {\n                // path.block is null when a widget is focused so the element to\n                // remove is the focused widget wrapper.\n                toRemove = editor.widgets.focused.wrapper;\n            }\n\n            newFocus = toRemove.getNext();\n\n            if (!newFocus || newFocus.type === CKEDITOR.NODE_TEXT || newFocus.hasAttribute('data-cke-temp')) {\n                // the data-cke-temp element is added by the Widget plugin for\n                // internal purposes but it exposes no API to handle it, so we\n                // are forced to manually check if newFocus is this element\n                // see https://jira.ez.no/browse/EZP-26016\n                newFocus = toRemove.getPrevious();\n            }\n\n            toRemove.remove();\n\n            if (newFocus) {\n                this.changeFocus(editor, newFocus);\n            }\n        },\n    };\n\n    /**\n     * CKEditor plugin providing the eZRemoveBlock command. This command\n     * allows to remove the block element holding the caret or the focused\n     * widget\n     *\n     * @class ezremoveblock\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezremoveblock', {\n        requires: ['widget', 'ezcaret'],\n\n        init: (editor) => editor.addCommand('eZRemoveBlock', removeBlockCommand),\n    });\n})(window);\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-remove-block.js"],"sourceRoot":""}