{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ezPluginEmbed.js","webpack:///webpack/bootstrap 64a4258ba12a323b72c7","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-embed.js","webpack:///./src/bundle/Resources/public/js/alloyeditor/src/widgets/ez-embed-base.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","61","_ezEmbedBase","_ezEmbedBase2","obj","default","global","CKEDITOR","plugins","add","requires","init","editor","ezembed","canBeAdded","path","elementPath","contains","embedDefinition","assign","embedBaseDefinition","widgets","embedInlineDefinition","defaults","href","content","view","template","requiredContent","upcast","element","attributes","insertWrapper","wrapper","insertHtml","insertElement","createEmbedPreviewNode","document","createElement","window","62","value","draggable","eZ","appendElement","insert","dom","createFromHtml","output","wrapElement","initOn","instance","getByElement","ready","fire","focus","edit","on","fireEditorInteraction","syncAlignment","getEzConfigElement","setWidgetContent","cancelEditEvents","initEditMode","contentId","getHref","replace","loadContent","token","querySelector","siteaccess","body","JSON","stringify","ViewInput","identifier","public","ContentQuery","Criteria","FacetBuilders","SortClauses","Filter","ContentIdCriterion","limit","offset","request","Request","method","headers","Accept","Content-Type","X-Siteaccess","X-CSRF-Token","mode","credentials","fetch","then","response","json","handleContentLoaded","bind","catch","error","helpers","notification","showErrorNotification","loadImageVariation","variationHref","_this","imageData","renderEmbedImagePreview","ContentImageVariation","uri","findEzimageField","fields","find","field","fieldTypeIdentifier","hits","isEmbedImage","$","classList","View","Result","searchHits","searchHit","Content","fieldImage","CurrentVersion","Version","Fields","fieldValue","renderEmbedPreview","Name","size","getConfig","variations","loadImagePreviewFromCurrentVersion","currentVersionHref","contentName","_this2","data","createEmbedPreview","title","elementNode","innerHTML","hasClass","renderLinkedIcon","imageUri","setAttribute","cancel","event","align","_setAlignment","_unsetAlignment","type","setAlignment","unsetAlignment","isAligned","setImageType","addClass","isImage","setHref","getFirst","next","getNext","remove","node","append","appendText","moveAfter","insertAfter","moveBefore","insertBefore","setConfig","key","valueElement","getValueElement","setText","getText","undefined","findOne","config","getEzLinkElement","link","getEzLinkAttribute","attribute","getAttribute","setEzLinkAttribute","removeEzLinkAttribute","removeAttribute","setLinkEditState","removeLinkEditState","isEditingLink","hasAttribute","setIsLinkedState","removeIsLinkedState","removeLinkedIcon","iconWrapper","icon","evt","wrapperRegion","getWrapperRegion","target","pageX","left","pageY","top","height","nativeEvent","selectionData","region","scroll","getWindow","getScrollPosition","getClientRect","y","bottom","x","right","direction","SELECTION_TOP_TO_BOTTOM"],"mappings":"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","file":"ezPluginEmbed.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginEmbed\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginEmbed\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ezPluginEmbed\"] = factory();\n\telse\n\t\troot[\"eZ\"] = root[\"eZ\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"] = root[\"eZ\"][\"ezAlloyEditor\"] || {}, root[\"eZ\"][\"ezAlloyEditor\"][\"ezPluginEmbed\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 61);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 61:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _ezEmbedBase = __webpack_require__(62);\n\nvar _ezEmbedBase2 = _interopRequireDefault(_ezEmbedBase);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ZERO_WIDTH_SPACE = '&#8203;';\n\n(function (global) {\n    if (CKEDITOR.plugins.get('ezembed') && CKEDITOR.plugins.get('ezembedinline')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezembed', {\n        requires: 'widget,ezaddcontent',\n\n        init: function init(editor) {\n            editor.ezembed = {\n                canBeAdded: function canBeAdded() {\n                    var path = editor.elementPath();\n\n                    return !path || path.contains('table', true) === null;\n                }\n            };\n\n            var embedDefinition = Object.assign({}, _ezEmbedBase2.default, { editor: editor });\n\n            editor.widgets.add('ezembed', embedDefinition);\n        }\n    });\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embedinline\"]` elements as widget.\n     *\n     * @class ezembedinline\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezembedinline', {\n        requires: 'widget,ezaddcontent',\n\n        init: function init(editor) {\n            var embedInlineDefinition = Object.assign({}, _ezEmbedBase2.default, {\n                editor: editor,\n                defaults: {\n                    href: 'ezcontent://',\n                    content: 'home',\n                    view: 'embed-inline'\n                },\n                template: '<span data-ezelement=\"ezembedinline\" data-href=\"{href}\" data-ezview=\"{view}\">{content}</span>',\n                requiredContent: 'span',\n\n                upcast: function upcast(element) {\n                    return element.name === 'span' && element.attributes['data-ezelement'] === 'ezembedinline';\n                },\n\n                insertWrapper: function insertWrapper(wrapper) {\n                    this.editor.insertHtml(ZERO_WIDTH_SPACE);\n                    this.editor.insertElement(wrapper);\n                },\n\n                createEmbedPreviewNode: function createEmbedPreviewNode() {\n                    return document.createElement('span');\n                }\n            });\n\n            editor.widgets.add('ezembedinline', embedInlineDefinition);\n        }\n    });\n})(window);\n\n/***/ }),\n\n/***/ 62:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar IMAGE_TYPE_CLASS = 'ez-embed-type-image';\nvar IS_LINKED_CLASS = 'is-linked';\nvar SHOW_EDIT_LINK_TOOLBAR_ATTR = 'data-show-edit-link-toolbar';\nvar DATA_ALIGNMENT_ATTR = 'ezalign';\n\nvar embedBaseDefinition = {\n    defaults: {\n        href: 'ezcontent://',\n        content: 'home',\n        view: 'embed'\n    },\n    draggable: false,\n    template: '<div data-ezelement=\"ezembed\" data-href=\"{href}\" data-ezview=\"{view}\">{content}</div>',\n    requiredContent: 'div',\n\n    upcast: function upcast(element) {\n        return element.name === 'div' && element.attributes['data-ezelement'] === 'ezembed';\n    },\n\n    insertWrapper: function insertWrapper(wrapper) {\n        this.editor.eZ.appendElement(wrapper);\n    },\n\n    /**\n     * Insert an `ezembed` widget in the editor. It overrides the\n     * default implementation to make sure that in the case where an\n     * embed widget is focused, a new one is added after it.\n     *\n     * @method insert\n     */\n    insert: function insert() {\n        var element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults));\n        var wrapper = this.editor.widgets.wrapElement(element, this.name);\n\n        this.editor.widgets.initOn(element, this.name);\n\n        this.insertWrapper(wrapper);\n\n        var instance = this.editor.widgets.getByElement(wrapper);\n        instance.ready = true;\n        instance.fire('ready');\n        instance.focus();\n    },\n\n    /**\n     * It's not possible to *edit* an embed widget in AlloyEditor,\n     * so `edit` directly calls `insert` instead. This is needed\n     * because by default, the CKEditor engine calls this method\n     * when an embed widget has the focus and the `ezembed` command\n     * is executed. In AlloyEditor, we want to insert a new widget,\n     * not to `edit` the focused widget as the editing process is\n     * provided by the style toolbar.\n     *\n     * @method edit\n     */\n    edit: function edit() {\n        this.insert();\n    },\n\n    init: function init() {\n        this.on('focus', this.fireEditorInteraction);\n        this.syncAlignment();\n        this.getEzConfigElement();\n        this.setWidgetContent('');\n        this.cancelEditEvents();\n\n        this.initEditMode();\n    },\n\n    /**\n     * Initializes the edit mode.\n     *\n     * @method initEditMode\n     */\n    initEditMode: function initEditMode() {\n        var contentId = this.getHref().replace('ezcontent://', '');\n\n        if (!contentId) {\n            return;\n        }\n\n        this.loadContent(contentId);\n    },\n\n    /**\n     * Loads the content info.\n     *\n     * @method loadContent\n     * @param {String} contentId The content id\n     */\n    loadContent: function loadContent(contentId) {\n        var token = document.querySelector('meta[name=\"CSRF-Token\"]').content;\n        var siteaccess = document.querySelector('meta[name=\"SiteAccess\"]').content;\n        var body = JSON.stringify({\n            ViewInput: {\n                identifier: 'embed-load-content-info-' + contentId,\n                public: false,\n                ContentQuery: {\n                    Criteria: {},\n                    FacetBuilders: {},\n                    SortClauses: {},\n                    Filter: { ContentIdCriterion: '' + contentId },\n                    limit: 1,\n                    offset: 0\n                }\n            }\n        });\n        var request = new Request('/api/ezp/v2/views', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/vnd.ez.api.View+json; version=1.1',\n                'Content-Type': 'application/vnd.ez.api.ViewInput+json; version=1.1',\n                'X-Siteaccess': siteaccess,\n                'X-CSRF-Token': token\n            },\n            body: body,\n            mode: 'same-origin',\n            credentials: 'same-origin'\n        });\n\n        fetch(request).then(function (response) {\n            return response.json();\n        }).then(this.handleContentLoaded.bind(this)).catch(function (error) {\n            return window.eZ.helpers.notification.showErrorNotification(error);\n        });\n    },\n\n    /**\n     * Loads the image variation.\n     *\n     * @method loadImageVariation\n     * @param {String} variationHref The variation href\n     */\n    loadImageVariation: function loadImageVariation(variationHref) {\n        var _this = this;\n\n        var token = document.querySelector('meta[name=\"CSRF-Token\"]').content;\n        var siteaccess = document.querySelector('meta[name=\"SiteAccess\"]').content;\n        var request = new Request(variationHref, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/vnd.ez.api.ContentImageVariation+json',\n                'X-Siteaccess': siteaccess,\n                'X-CSRF-Token': token\n            },\n            credentials: 'same-origin',\n            mode: 'same-origin'\n        });\n\n        fetch(request).then(function (response) {\n            return response.json();\n        }).then(function (imageData) {\n            return _this.renderEmbedImagePreview(imageData.ContentImageVariation.uri);\n        });\n    },\n\n    /**\n     * Finds the ezimage field.\n     *\n     * @method findEzimageField\n     * @returns {Object}\n     */\n    findEzimageField: function findEzimageField(fields) {\n        return fields.find(function (field) {\n            return field.fieldTypeIdentifier === 'ezimage';\n        });\n    },\n\n\n    /**\n     * Handles loading the content info.\n     *\n     * @method handleContentLoaded\n     * @param {Object} hits The result of content search\n     */\n    handleContentLoaded: function handleContentLoaded(hits) {\n        var isEmbedImage = this.element.$.classList.contains(IMAGE_TYPE_CLASS);\n        var content = hits.View.Result.searchHits.searchHit[0].value.Content;\n\n        if (isEmbedImage) {\n            var fieldImage = this.findEzimageField(content.CurrentVersion.Version.Fields.field);\n\n            if (!fieldImage || !fieldImage.fieldValue) {\n                this.renderEmbedPreview(content.Name);\n\n                return;\n            }\n\n            var size = this.getConfig('size');\n            var variationHref = fieldImage.fieldValue.variations[size].href;\n\n            this.variations = fieldImage.fieldValue.variations;\n\n            this.loadImageVariation(variationHref);\n        } else {\n            this.renderEmbedPreview(content.Name);\n        }\n    },\n\n    /**\n     * Loads image preview from current version href\n     *\n     * @method loadImagePreviewFromCurrentVersion\n     * @param {String} currentVersionHref The current version href\n     * @param {String} contnetName The content name\n     */\n    loadImagePreviewFromCurrentVersion: function loadImagePreviewFromCurrentVersion(currentVersionHref, contentName) {\n        var _this2 = this;\n\n        var token = document.querySelector('meta[name=\"CSRF-Token\"]').content;\n        var siteaccess = document.querySelector('meta[name=\"SiteAccess\"]').content;\n        var request = new Request(currentVersionHref, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/vnd.ez.api.Version+json',\n                'X-Siteaccess': siteaccess,\n                'X-CSRF-Token': token\n            },\n            credentials: 'same-origin',\n            mode: 'same-origin'\n        });\n\n        fetch(request).then(function (response) {\n            return response.json();\n        }).then(function (data) {\n            var fieldImage = _this2.findEzimageField(data.Version.Fields.field);\n\n            if (!fieldImage || !fieldImage.fieldValue) {\n                contentName = contentName ? contentName : '';\n\n                _this2.renderEmbedPreview(contentName);\n\n                return;\n            }\n\n            var size = _this2.getConfig('size');\n            var variationHref = fieldImage.fieldValue.variations[size].href;\n\n            _this2.variations = fieldImage.fieldValue.variations;\n\n            _this2.loadImageVariation(variationHref);\n        });\n    },\n\n    createEmbedPreviewNode: function createEmbedPreviewNode() {\n        return document.createElement('p');\n    },\n\n    createEmbedPreview: function createEmbedPreview(title) {\n        return '\\n            <svg class=\"ez-icon ez-icon--medium ez-icon--secondary\">\\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#tag\"></use>\\n            </svg>\\n            <span class=\"ez-embed-content__title\">' + title + '</span>\\n        ';\n    },\n\n    /**\n     * Renders the embed preview\n     *\n     * @method renderEmbedPreview\n     * @param {String} title The content title\n     */\n    renderEmbedPreview: function renderEmbedPreview(title) {\n        var elementNode = this.createEmbedPreviewNode();\n        var template = this.createEmbedPreview(title);\n\n        elementNode.classList.add('ez-embed-content');\n        elementNode.innerHTML = template;\n\n        this.setWidgetContent(elementNode);\n\n        if (this.element.hasClass(IS_LINKED_CLASS)) {\n            this.renderLinkedIcon();\n        }\n    },\n\n    /**\n     * Renders the embed image preview\n     *\n     * @method renderEmbedImagePreview\n     * @param {String} imageUri The image uri\n     */\n    renderEmbedImagePreview: function renderEmbedImagePreview(imageUri) {\n        var elementNode = document.createElement('img');\n\n        elementNode.setAttribute('src', imageUri);\n\n        this.setWidgetContent(elementNode);\n    },\n\n    /**\n     * Cancels the widget events that trigger the `edit` event as\n     * an embed widget can not be edited in a *CKEditor way*.\n     *\n     * @method cancelEditEvents\n     */\n    cancelEditEvents: function cancelEditEvents() {\n        var cancel = function cancel(event) {\n            return event.cancel();\n        };\n\n        this.on('doubleclick', cancel, null, null, 5);\n        this.on('key', cancel, null, null, 5);\n    },\n\n    /**\n     * Initializes the alignment on the widget wrapper if the widget\n     * is aligned.\n     *\n     * @method syncAlignment\n     */\n    syncAlignment: function syncAlignment() {\n        var align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n        if (align) {\n            this._setAlignment(align);\n        } else {\n            this._unsetAlignment();\n        }\n    },\n\n    /**\n     * Sets the alignment of the embed widget to `type`. The\n     * alignment is set by adding the `data-ezalign` attribute\n     * on the widget wrapper and the widget element.\n     *\n     * @method _setAlignment\n     * @param {String} type\n     */\n    _setAlignment: function _setAlignment(type) {\n        this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n        this.element.data(DATA_ALIGNMENT_ATTR, type);\n    },\n\n    /**\n     * Sets the alignment of the embed widget to `type` and fires\n     * the corresponding `editorInteraction` event.\n     *\n     * @method setAlignment\n     * @param {String} type\n     */\n    setAlignment: function setAlignment(type) {\n        this._setAlignment(type);\n        this.fireEditorInteraction('setAlignment' + type);\n    },\n\n    /**\n     * Removes the alignment of the widget.\n     *\n     * @method _unsetAlignment\n     */\n    _unsetAlignment: function _unsetAlignment() {\n        this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n        this.element.data(DATA_ALIGNMENT_ATTR, false);\n    },\n\n    /**\n     * Removes the alignment of the widget and fires the\n     * corresponding `editorInteraction` event.\n     *\n     * @method unsetAlignment\n     */\n    unsetAlignment: function unsetAlignment() {\n        this._unsetAlignment();\n        this.fireEditorInteraction('unsetAlignment');\n    },\n\n    /**\n     * Checks whether the embed is aligned with `type` alignment.\n     *\n     * @method isAligned\n     * @param {String} type\n     * @return {Boolean}\n     */\n    isAligned: function isAligned(type) {\n        return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n    },\n\n    /**\n     * Set the embed as an embed representing an image\n     *\n     * @method setImageType\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setImageType: function setImageType() {\n        this.element.addClass(IMAGE_TYPE_CLASS);\n\n        return this;\n    },\n\n    /**\n     * Check whether the embed widget represents an image or not.\n     *\n     * @method isImage\n     * @return {Boolean}\n     */\n    isImage: function isImage() {\n        return this.element.hasClass(IMAGE_TYPE_CLASS);\n    },\n\n    /**\n     * Sets the `href` of the embed is URI to the embed content or\n     * location. (ezcontent://32 for instance).\n     *\n     * @method setHref\n     * @param {String} href\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setHref: function setHref(href) {\n        this.element.data('href', href);\n\n        return this;\n    },\n\n    /**\n     * Returns the `href`of the embed.\n     *\n     * @method getHref\n     * @return {String}\n     */\n    getHref: function getHref() {\n        return this.element.data('href');\n    },\n\n    /**\n     * Sets the widget content. It makes sure the config element is\n     * not overwritten.\n     *\n     * @method setWidgetContent\n     * @param {String|CKEDITOR.dom.node} content\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setWidgetContent: function setWidgetContent(content) {\n        var element = this.element.getFirst();\n        var next = void 0;\n\n        while (element) {\n            next = element.getNext();\n            if (!element.data || !element.data('ezelement')) {\n                element.remove();\n            }\n            element = next;\n        }\n\n        if (content instanceof CKEDITOR.dom.node) {\n            this.element.append(content);\n        } else {\n            this.element.appendText(content);\n        }\n\n        return this;\n    },\n\n    /**\n     * Moves the widget after the given element. It also fires the\n     * `editorInteraction` event so that the UI can respond to that\n     * change.\n     *\n     * @method moveAfter\n     * @param {CKEDITOR.dom.element} element\n     */\n    moveAfter: function moveAfter(element) {\n        this.wrapper.insertAfter(element);\n        this.fireEditorInteraction('moveAfter');\n    },\n\n    /**\n     * Moves the widget before the given element. It also fires the\n     * `editorInteraction` event so that the UI can respond to that\n     * change.\n     *\n     * @method moveAfter\n     * @param {CKEDITOR.dom.element} element\n     */\n    moveBefore: function moveBefore(element) {\n        this.wrapper.insertBefore(element);\n        this.fireEditorInteraction('moveBefore');\n    },\n\n    /**\n     * Sets a config value under the `key` for the embed.\n     *\n     * @method setConfig\n     * @param {String} key\n     * @param {String} value\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setConfig: function setConfig(key, value) {\n        var valueElement = this.getValueElement(key);\n\n        if (!valueElement) {\n            valueElement = new CKEDITOR.dom.element('span');\n            valueElement.data('ezelement', 'ezvalue');\n            valueElement.data('ezvalue-key', key);\n            this.getEzConfigElement().append(valueElement);\n        }\n\n        valueElement.setText(value);\n\n        return this;\n    },\n\n    /**\n     * Returns the config value for the `key` or undefined if the\n     * config key is not found.\n     *\n     * @method getConfig\n     * @return {String}\n     */\n    getConfig: function getConfig(key) {\n        var valueElement = this.getValueElement(key);\n\n        return valueElement ? valueElement.getText() : undefined;\n    },\n\n    /**\n     * Returns the Element holding the config under `key`\n     *\n     * @method getValueElement\n     * @param {String} key\n     * @return {CKEDITOR.dom.element}\n     */\n    getValueElement: function getValueElement(key) {\n        return this.element.findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n    },\n\n    /**\n     * Returns the element used as a container the config values. if\n     * it does not exist, it is created.\n     *\n     * @method getEzConfigElement\n     * @return {CKEDITOR.dom.element}\n     */\n    getEzConfigElement: function getEzConfigElement() {\n        var config = this.element.findOne('[data-ezelement=\"ezconfig\"]');\n\n        if (!config) {\n            config = new CKEDITOR.dom.element('span');\n            config.data('ezelement', 'ezconfig');\n            this.element.append(config, true);\n        }\n\n        return config;\n    },\n\n    /**\n     * Returns the element used as a container the link values. if\n     * it does not exist, it is created.\n     *\n     * @method getEzLinkElement\n     * @return {CKEDITOR.dom.element}\n     */\n    getEzLinkElement: function getEzLinkElement() {\n        var link = this.element.findOne('[data-ezelement=\"ezlink\"]');\n\n        if (!link) {\n            link = new CKEDITOR.dom.element('a');\n            link.$.innerHTML = ' ';\n            link.setAttribute('data-ezelement', 'ezlink');\n            link.setAttribute('data-ez-temporary-link', true);\n            this.element.append(link);\n        }\n\n        return link;\n    },\n\n    /**\n     * Gets the link attribute\n     *\n     * @method getEzLinkAttribute\n     * @param {String} attribute\n     * @return {String}\n     */\n    getEzLinkAttribute: function getEzLinkAttribute(attribute) {\n        var link = this.getEzLinkElement();\n\n        return link.getAttribute(attribute);\n    },\n\n    /**\n     * Sets the link attribute\n     *\n     * @method getEzLinkAttribute\n     * @param {String} attribute\n     * @param {String} value\n     */\n    setEzLinkAttribute: function setEzLinkAttribute(attribute, value) {\n        var link = this.getEzLinkElement();\n\n        link.setAttribute(attribute, value);\n    },\n\n    /**\n     * Removes the link attribute\n     *\n     * @method removeEzLinkAttribute\n     * @param {String} attribute\n     */\n    removeEzLinkAttribute: function removeEzLinkAttribute(attribute) {\n        var link = this.getEzLinkElement();\n\n        link.removeAttribute(attribute);\n    },\n\n    /**\n     * Sets the link edit state\n     *\n     * @method setLinkEditState\n     */\n    setLinkEditState: function setLinkEditState() {\n        this.element.setAttribute(SHOW_EDIT_LINK_TOOLBAR_ATTR, true);\n    },\n\n    /**\n     * Removes the link edit state\n     *\n     * @method removeLinkEditState\n     */\n    removeLinkEditState: function removeLinkEditState() {\n        this.element.removeAttribute(SHOW_EDIT_LINK_TOOLBAR_ATTR);\n    },\n\n    /**\n     * Checks if widget is in link edit state\n     *\n     * @method isEditingLink\n     * @return {Boolean}\n     */\n    isEditingLink: function isEditingLink() {\n        return this.element.hasAttribute(SHOW_EDIT_LINK_TOOLBAR_ATTR);\n    },\n\n    /**\n     * Sets the is linked state\n     *\n     * @method setIsLinkedState\n     */\n    setIsLinkedState: function setIsLinkedState() {\n        this.element.$.classList.add(IS_LINKED_CLASS);\n        this.renderLinkedIcon();\n    },\n\n    /**\n     * Removes the is linked state\n     *\n     * @method removeIsLinkedState\n     */\n    removeIsLinkedState: function removeIsLinkedState() {\n        this.element.$.classList.remove(IS_LINKED_CLASS);\n        this.removeLinkedIcon();\n    },\n\n    /**\n     * Renders the linked icon\n     *\n     * @method renderLinkedIcon\n     */\n    renderLinkedIcon: function renderLinkedIcon() {\n        var iconWrapper = new CKEDITOR.dom.element('span');\n        var icon = '\\n            <svg class=\"ez-icon ez-icon--medium ez-icon--light\">\\n                <use xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#link\"></use>\\n            </svg>\\n        ';\n\n        if (this.element.findOne('.ez-embed__icon-wrapper')) {\n            return;\n        }\n\n        iconWrapper.$.classList.add('ez-embed__icon-wrapper');\n        iconWrapper.$.innerHTML = icon;\n\n        this.element.append(iconWrapper);\n    },\n\n    /**\n     * Removes the linked icon\n     *\n     * @method removeLinkedIcon\n     */\n    removeLinkedIcon: function removeLinkedIcon() {\n        var iconWrapper = this.element.findOne('.ez-embed__icon-wrapper');\n\n        if (iconWrapper) {\n            iconWrapper.remove();\n        }\n    },\n\n    /**\n     * Fires the editorInteraction event so that AlloyEditor editor\n     * UI remains visible and is updated. This method also computes\n     * `selectionData.region` and the `pageX` and `pageY` properties\n     * so that the add toolbar is correctly positioned on the\n     * widget.\n     *\n     * @method fireEditorInteraction\n     * @param {Object|String} evt this initial event info object or\n     * the event name for which the `editorInteraction` is fired.\n     */\n    fireEditorInteraction: function fireEditorInteraction(evt) {\n        var wrapperRegion = this.getWrapperRegion();\n        var name = evt.name || evt;\n        var event = {\n            editor: this.editor,\n            target: this.element.$,\n            name: 'widget' + name,\n            pageX: wrapperRegion.left,\n            pageY: wrapperRegion.top + wrapperRegion.height\n        };\n\n        this.editor.focus();\n        this.focus();\n\n        this.editor.fire('editorInteraction', {\n            nativeEvent: event,\n            selectionData: {\n                element: this.element,\n                region: wrapperRegion\n            }\n        });\n    },\n\n    /**\n     * Returns the wrapper element region.\n     *\n     * @method getWrapperRegion\n     * @private\n     * @return {Object}\n     */\n    getWrapperRegion: function getWrapperRegion() {\n        var scroll = this.wrapper.getWindow().getScrollPosition();\n        var region = this.wrapper.getClientRect();\n\n        region.top += scroll.y;\n        region.bottom += scroll.y;\n        region.left += scroll.x;\n        region.right += scroll.x;\n        region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n        return region;\n    }\n};\n\nexports.default = embedBaseDefinition;\n\n/***/ })\n\n/******/ })[\"default\"];\n});\n\n\n// WEBPACK FOOTER //\n// ezPluginEmbed.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 64a4258ba12a323b72c7","import embedBaseDefinition from '../widgets/ez-embed-base';\n\nconst ZERO_WIDTH_SPACE = '&#8203;';\n\n(function(global) {\n    if (CKEDITOR.plugins.get('ezembed') && CKEDITOR.plugins.get('ezembedinline')) {\n        return;\n    }\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embed\"]` elements as widget.\n     *\n     * @class ezembed\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezembed', {\n        requires: 'widget,ezaddcontent',\n\n        init: function(editor) {\n            editor.ezembed = {\n                canBeAdded: () => {\n                    const path = editor.elementPath();\n\n                    return !path || path.contains('table', true) === null;\n                },\n            };\n\n            const embedDefinition = Object.assign({}, embedBaseDefinition, { editor });\n\n            editor.widgets.add('ezembed', embedDefinition);\n        },\n    });\n\n    /**\n     * CKEditor plugin to configure the widget plugin so that it recognizes the\n     * `div[data-ezelement=\"embedinline\"]` elements as widget.\n     *\n     * @class ezembedinline\n     * @namespace CKEDITOR.plugins\n     * @constructor\n     */\n    CKEDITOR.plugins.add('ezembedinline', {\n        requires: 'widget,ezaddcontent',\n\n        init: function(editor) {\n            const embedInlineDefinition = Object.assign({}, embedBaseDefinition, {\n                editor,\n                defaults: {\n                    href: 'ezcontent://',\n                    content: 'home',\n                    view: 'embed-inline',\n                },\n                template: '<span data-ezelement=\"ezembedinline\" data-href=\"{href}\" data-ezview=\"{view}\">{content}</span>',\n                requiredContent: 'span',\n\n                upcast: (element) => {\n                    return element.name === 'span' && element.attributes['data-ezelement'] === 'ezembedinline';\n                },\n\n                insertWrapper: function(wrapper) {\n                    this.editor.insertHtml(ZERO_WIDTH_SPACE);\n                    this.editor.insertElement(wrapper);\n                },\n\n                createEmbedPreviewNode: function() {\n                    return document.createElement('span');\n                },\n            });\n\n            editor.widgets.add('ezembedinline', embedInlineDefinition);\n        },\n    });\n})(window);\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/plugins/ez-embed.js","const IMAGE_TYPE_CLASS = 'ez-embed-type-image';\nconst IS_LINKED_CLASS = 'is-linked';\nconst SHOW_EDIT_LINK_TOOLBAR_ATTR = 'data-show-edit-link-toolbar';\nconst DATA_ALIGNMENT_ATTR = 'ezalign';\n\nconst embedBaseDefinition = {\n    defaults: {\n        href: 'ezcontent://',\n        content: 'home',\n        view: 'embed',\n    },\n    draggable: false,\n    template: '<div data-ezelement=\"ezembed\" data-href=\"{href}\" data-ezview=\"{view}\">{content}</div>',\n    requiredContent: 'div',\n\n    upcast: (element) => {\n        return element.name === 'div' && element.attributes['data-ezelement'] === 'ezembed';\n    },\n\n    insertWrapper: function(wrapper) {\n        this.editor.eZ.appendElement(wrapper);\n    },\n\n    /**\n     * Insert an `ezembed` widget in the editor. It overrides the\n     * default implementation to make sure that in the case where an\n     * embed widget is focused, a new one is added after it.\n     *\n     * @method insert\n     */\n    insert: function() {\n        const element = CKEDITOR.dom.element.createFromHtml(this.template.output(this.defaults));\n        const wrapper = this.editor.widgets.wrapElement(element, this.name);\n\n        this.editor.widgets.initOn(element, this.name);\n\n        this.insertWrapper(wrapper);\n\n        const instance = this.editor.widgets.getByElement(wrapper);\n        instance.ready = true;\n        instance.fire('ready');\n        instance.focus();\n    },\n\n    /**\n     * It's not possible to *edit* an embed widget in AlloyEditor,\n     * so `edit` directly calls `insert` instead. This is needed\n     * because by default, the CKEditor engine calls this method\n     * when an embed widget has the focus and the `ezembed` command\n     * is executed. In AlloyEditor, we want to insert a new widget,\n     * not to `edit` the focused widget as the editing process is\n     * provided by the style toolbar.\n     *\n     * @method edit\n     */\n    edit: function() {\n        this.insert();\n    },\n\n    init: function() {\n        this.on('focus', this.fireEditorInteraction);\n        this.syncAlignment();\n        this.getEzConfigElement();\n        this.setWidgetContent('');\n        this.cancelEditEvents();\n\n        this.initEditMode();\n    },\n\n    /**\n     * Initializes the edit mode.\n     *\n     * @method initEditMode\n     */\n    initEditMode: function() {\n        const contentId = this.getHref().replace('ezcontent://', '');\n\n        if (!contentId) {\n            return;\n        }\n\n        this.loadContent(contentId);\n    },\n\n    /**\n     * Loads the content info.\n     *\n     * @method loadContent\n     * @param {String} contentId The content id\n     */\n    loadContent: function(contentId) {\n        const token = document.querySelector('meta[name=\"CSRF-Token\"]').content;\n        const siteaccess = document.querySelector('meta[name=\"SiteAccess\"]').content;\n        const body = JSON.stringify({\n            ViewInput: {\n                identifier: `embed-load-content-info-${contentId}`,\n                public: false,\n                ContentQuery: {\n                    Criteria: {},\n                    FacetBuilders: {},\n                    SortClauses: {},\n                    Filter: { ContentIdCriterion: `${contentId}` },\n                    limit: 1,\n                    offset: 0,\n                },\n            },\n        });\n        const request = new Request('/api/ezp/v2/views', {\n            method: 'POST',\n            headers: {\n                Accept: 'application/vnd.ez.api.View+json; version=1.1',\n                'Content-Type': 'application/vnd.ez.api.ViewInput+json; version=1.1',\n                'X-Siteaccess': siteaccess,\n                'X-CSRF-Token': token,\n            },\n            body,\n            mode: 'same-origin',\n            credentials: 'same-origin',\n        });\n\n        fetch(request)\n            .then((response) => response.json())\n            .then(this.handleContentLoaded.bind(this))\n            .catch((error) => window.eZ.helpers.notification.showErrorNotification(error));\n    },\n\n    /**\n     * Loads the image variation.\n     *\n     * @method loadImageVariation\n     * @param {String} variationHref The variation href\n     */\n    loadImageVariation: function(variationHref) {\n        const token = document.querySelector('meta[name=\"CSRF-Token\"]').content;\n        const siteaccess = document.querySelector('meta[name=\"SiteAccess\"]').content;\n        const request = new Request(variationHref, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/vnd.ez.api.ContentImageVariation+json',\n                'X-Siteaccess': siteaccess,\n                'X-CSRF-Token': token,\n            },\n            credentials: 'same-origin',\n            mode: 'same-origin',\n        });\n\n        fetch(request)\n            .then((response) => response.json())\n            .then((imageData) => this.renderEmbedImagePreview(imageData.ContentImageVariation.uri));\n    },\n\n    /**\n     * Finds the ezimage field.\n     *\n     * @method findEzimageField\n     * @returns {Object}\n     */\n    findEzimageField(fields) {\n        return fields.find((field) => field.fieldTypeIdentifier === 'ezimage');\n    },\n\n    /**\n     * Handles loading the content info.\n     *\n     * @method handleContentLoaded\n     * @param {Object} hits The result of content search\n     */\n    handleContentLoaded: function(hits) {\n        const isEmbedImage = this.element.$.classList.contains(IMAGE_TYPE_CLASS);\n        const content = hits.View.Result.searchHits.searchHit[0].value.Content;\n\n        if (isEmbedImage) {\n            const fieldImage = this.findEzimageField(content.CurrentVersion.Version.Fields.field);\n\n            if (!fieldImage || !fieldImage.fieldValue) {\n                this.renderEmbedPreview(content.Name);\n\n                return;\n            }\n\n            const size = this.getConfig('size');\n            const variationHref = fieldImage.fieldValue.variations[size].href;\n\n            this.variations = fieldImage.fieldValue.variations;\n\n            this.loadImageVariation(variationHref);\n        } else {\n            this.renderEmbedPreview(content.Name);\n        }\n    },\n\n    /**\n     * Loads image preview from current version href\n     *\n     * @method loadImagePreviewFromCurrentVersion\n     * @param {String} currentVersionHref The current version href\n     * @param {String} contnetName The content name\n     */\n    loadImagePreviewFromCurrentVersion: function(currentVersionHref, contentName) {\n        const token = document.querySelector('meta[name=\"CSRF-Token\"]').content;\n        const siteaccess = document.querySelector('meta[name=\"SiteAccess\"]').content;\n        const request = new Request(currentVersionHref, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/vnd.ez.api.Version+json',\n                'X-Siteaccess': siteaccess,\n                'X-CSRF-Token': token,\n            },\n            credentials: 'same-origin',\n            mode: 'same-origin',\n        });\n\n        fetch(request)\n            .then((response) => response.json())\n            .then((data) => {\n                const fieldImage = this.findEzimageField(data.Version.Fields.field);\n\n                if (!fieldImage || !fieldImage.fieldValue) {\n                    contentName = contentName ? contentName : '';\n\n                    this.renderEmbedPreview(contentName);\n\n                    return;\n                }\n\n                const size = this.getConfig('size');\n                const variationHref = fieldImage.fieldValue.variations[size].href;\n\n                this.variations = fieldImage.fieldValue.variations;\n\n                this.loadImageVariation(variationHref);\n            });\n    },\n\n    createEmbedPreviewNode: function() {\n        return document.createElement('p');\n    },\n\n    createEmbedPreview: function(title) {\n        return `\n            <svg class=\"ez-icon ez-icon--medium ez-icon--secondary\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#tag\"></use>\n            </svg>\n            <span class=\"ez-embed-content__title\">${title}</span>\n        `;\n    },\n\n    /**\n     * Renders the embed preview\n     *\n     * @method renderEmbedPreview\n     * @param {String} title The content title\n     */\n    renderEmbedPreview: function(title) {\n        const elementNode = this.createEmbedPreviewNode();\n        const template = this.createEmbedPreview(title);\n\n        elementNode.classList.add('ez-embed-content');\n        elementNode.innerHTML = template;\n\n        this.setWidgetContent(elementNode);\n\n        if (this.element.hasClass(IS_LINKED_CLASS)) {\n            this.renderLinkedIcon();\n        }\n    },\n\n    /**\n     * Renders the embed image preview\n     *\n     * @method renderEmbedImagePreview\n     * @param {String} imageUri The image uri\n     */\n    renderEmbedImagePreview: function(imageUri) {\n        const elementNode = document.createElement('img');\n\n        elementNode.setAttribute('src', imageUri);\n\n        this.setWidgetContent(elementNode);\n    },\n\n    /**\n     * Cancels the widget events that trigger the `edit` event as\n     * an embed widget can not be edited in a *CKEditor way*.\n     *\n     * @method cancelEditEvents\n     */\n    cancelEditEvents: function() {\n        const cancel = (event) => event.cancel();\n\n        this.on('doubleclick', cancel, null, null, 5);\n        this.on('key', cancel, null, null, 5);\n    },\n\n    /**\n     * Initializes the alignment on the widget wrapper if the widget\n     * is aligned.\n     *\n     * @method syncAlignment\n     */\n    syncAlignment: function() {\n        const align = this.element.data(DATA_ALIGNMENT_ATTR);\n\n        if (align) {\n            this._setAlignment(align);\n        } else {\n            this._unsetAlignment();\n        }\n    },\n\n    /**\n     * Sets the alignment of the embed widget to `type`. The\n     * alignment is set by adding the `data-ezalign` attribute\n     * on the widget wrapper and the widget element.\n     *\n     * @method _setAlignment\n     * @param {String} type\n     */\n    _setAlignment: function(type) {\n        this.wrapper.data(DATA_ALIGNMENT_ATTR, type);\n        this.element.data(DATA_ALIGNMENT_ATTR, type);\n    },\n\n    /**\n     * Sets the alignment of the embed widget to `type` and fires\n     * the corresponding `editorInteraction` event.\n     *\n     * @method setAlignment\n     * @param {String} type\n     */\n    setAlignment: function(type) {\n        this._setAlignment(type);\n        this.fireEditorInteraction('setAlignment' + type);\n    },\n\n    /**\n     * Removes the alignment of the widget.\n     *\n     * @method _unsetAlignment\n     */\n    _unsetAlignment: function() {\n        this.wrapper.data(DATA_ALIGNMENT_ATTR, false);\n        this.element.data(DATA_ALIGNMENT_ATTR, false);\n    },\n\n    /**\n     * Removes the alignment of the widget and fires the\n     * corresponding `editorInteraction` event.\n     *\n     * @method unsetAlignment\n     */\n    unsetAlignment: function() {\n        this._unsetAlignment();\n        this.fireEditorInteraction('unsetAlignment');\n    },\n\n    /**\n     * Checks whether the embed is aligned with `type` alignment.\n     *\n     * @method isAligned\n     * @param {String} type\n     * @return {Boolean}\n     */\n    isAligned: function(type) {\n        return this.wrapper.data(DATA_ALIGNMENT_ATTR) === type;\n    },\n\n    /**\n     * Set the embed as an embed representing an image\n     *\n     * @method setImageType\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setImageType: function() {\n        this.element.addClass(IMAGE_TYPE_CLASS);\n\n        return this;\n    },\n\n    /**\n     * Check whether the embed widget represents an image or not.\n     *\n     * @method isImage\n     * @return {Boolean}\n     */\n    isImage: function() {\n        return this.element.hasClass(IMAGE_TYPE_CLASS);\n    },\n\n    /**\n     * Sets the `href` of the embed is URI to the embed content or\n     * location. (ezcontent://32 for instance).\n     *\n     * @method setHref\n     * @param {String} href\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setHref: function(href) {\n        this.element.data('href', href);\n\n        return this;\n    },\n\n    /**\n     * Returns the `href`of the embed.\n     *\n     * @method getHref\n     * @return {String}\n     */\n    getHref: function() {\n        return this.element.data('href');\n    },\n\n    /**\n     * Sets the widget content. It makes sure the config element is\n     * not overwritten.\n     *\n     * @method setWidgetContent\n     * @param {String|CKEDITOR.dom.node} content\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setWidgetContent: function(content) {\n        let element = this.element.getFirst();\n        let next;\n\n        while (element) {\n            next = element.getNext();\n            if (!element.data || !element.data('ezelement')) {\n                element.remove();\n            }\n            element = next;\n        }\n\n        if (content instanceof CKEDITOR.dom.node) {\n            this.element.append(content);\n        } else {\n            this.element.appendText(content);\n        }\n\n        return this;\n    },\n\n    /**\n     * Moves the widget after the given element. It also fires the\n     * `editorInteraction` event so that the UI can respond to that\n     * change.\n     *\n     * @method moveAfter\n     * @param {CKEDITOR.dom.element} element\n     */\n    moveAfter: function(element) {\n        this.wrapper.insertAfter(element);\n        this.fireEditorInteraction('moveAfter');\n    },\n\n    /**\n     * Moves the widget before the given element. It also fires the\n     * `editorInteraction` event so that the UI can respond to that\n     * change.\n     *\n     * @method moveAfter\n     * @param {CKEDITOR.dom.element} element\n     */\n    moveBefore: function(element) {\n        this.wrapper.insertBefore(element);\n        this.fireEditorInteraction('moveBefore');\n    },\n\n    /**\n     * Sets a config value under the `key` for the embed.\n     *\n     * @method setConfig\n     * @param {String} key\n     * @param {String} value\n     * @return {CKEDITOR.plugins.widget}\n     */\n    setConfig: function(key, value) {\n        let valueElement = this.getValueElement(key);\n\n        if (!valueElement) {\n            valueElement = new CKEDITOR.dom.element('span');\n            valueElement.data('ezelement', 'ezvalue');\n            valueElement.data('ezvalue-key', key);\n            this.getEzConfigElement().append(valueElement);\n        }\n\n        valueElement.setText(value);\n\n        return this;\n    },\n\n    /**\n     * Returns the config value for the `key` or undefined if the\n     * config key is not found.\n     *\n     * @method getConfig\n     * @return {String}\n     */\n    getConfig: function(key) {\n        const valueElement = this.getValueElement(key);\n\n        return valueElement ? valueElement.getText() : undefined;\n    },\n\n    /**\n     * Returns the Element holding the config under `key`\n     *\n     * @method getValueElement\n     * @param {String} key\n     * @return {CKEDITOR.dom.element}\n     */\n    getValueElement: function(key) {\n        return this.element.findOne('[data-ezelement=\"ezvalue\"][data-ezvalue-key=\"' + key + '\"]');\n    },\n\n    /**\n     * Returns the element used as a container the config values. if\n     * it does not exist, it is created.\n     *\n     * @method getEzConfigElement\n     * @return {CKEDITOR.dom.element}\n     */\n    getEzConfigElement: function() {\n        let config = this.element.findOne('[data-ezelement=\"ezconfig\"]');\n\n        if (!config) {\n            config = new CKEDITOR.dom.element('span');\n            config.data('ezelement', 'ezconfig');\n            this.element.append(config, true);\n        }\n\n        return config;\n    },\n\n    /**\n     * Returns the element used as a container the link values. if\n     * it does not exist, it is created.\n     *\n     * @method getEzLinkElement\n     * @return {CKEDITOR.dom.element}\n     */\n    getEzLinkElement: function() {\n        let link = this.element.findOne('[data-ezelement=\"ezlink\"]');\n\n        if (!link) {\n            link = new CKEDITOR.dom.element('a');\n            link.$.innerHTML = ' ';\n            link.setAttribute('data-ezelement', 'ezlink');\n            link.setAttribute('data-ez-temporary-link', true);\n            this.element.append(link);\n        }\n\n        return link;\n    },\n\n    /**\n     * Gets the link attribute\n     *\n     * @method getEzLinkAttribute\n     * @param {String} attribute\n     * @return {String}\n     */\n    getEzLinkAttribute: function(attribute) {\n        const link = this.getEzLinkElement();\n\n        return link.getAttribute(attribute);\n    },\n\n    /**\n     * Sets the link attribute\n     *\n     * @method getEzLinkAttribute\n     * @param {String} attribute\n     * @param {String} value\n     */\n    setEzLinkAttribute: function(attribute, value) {\n        const link = this.getEzLinkElement();\n\n        link.setAttribute(attribute, value);\n    },\n\n    /**\n     * Removes the link attribute\n     *\n     * @method removeEzLinkAttribute\n     * @param {String} attribute\n     */\n    removeEzLinkAttribute: function(attribute) {\n        const link = this.getEzLinkElement();\n\n        link.removeAttribute(attribute);\n    },\n\n    /**\n     * Sets the link edit state\n     *\n     * @method setLinkEditState\n     */\n    setLinkEditState: function() {\n        this.element.setAttribute(SHOW_EDIT_LINK_TOOLBAR_ATTR, true);\n    },\n\n    /**\n     * Removes the link edit state\n     *\n     * @method removeLinkEditState\n     */\n    removeLinkEditState: function() {\n        this.element.removeAttribute(SHOW_EDIT_LINK_TOOLBAR_ATTR);\n    },\n\n    /**\n     * Checks if widget is in link edit state\n     *\n     * @method isEditingLink\n     * @return {Boolean}\n     */\n    isEditingLink: function() {\n        return this.element.hasAttribute(SHOW_EDIT_LINK_TOOLBAR_ATTR);\n    },\n\n    /**\n     * Sets the is linked state\n     *\n     * @method setIsLinkedState\n     */\n    setIsLinkedState: function() {\n        this.element.$.classList.add(IS_LINKED_CLASS);\n        this.renderLinkedIcon();\n    },\n\n    /**\n     * Removes the is linked state\n     *\n     * @method removeIsLinkedState\n     */\n    removeIsLinkedState: function() {\n        this.element.$.classList.remove(IS_LINKED_CLASS);\n        this.removeLinkedIcon();\n    },\n\n    /**\n     * Renders the linked icon\n     *\n     * @method renderLinkedIcon\n     */\n    renderLinkedIcon: function() {\n        const iconWrapper = new CKEDITOR.dom.element('span');\n        const icon = `\n            <svg class=\"ez-icon ez-icon--medium ez-icon--light\">\n                <use xlink:href=\"/bundles/ezplatformadminui/img/ez-icons.svg#link\"></use>\n            </svg>\n        `;\n\n        if (this.element.findOne('.ez-embed__icon-wrapper')) {\n            return;\n        }\n\n        iconWrapper.$.classList.add('ez-embed__icon-wrapper');\n        iconWrapper.$.innerHTML = icon;\n\n        this.element.append(iconWrapper);\n    },\n\n    /**\n     * Removes the linked icon\n     *\n     * @method removeLinkedIcon\n     */\n    removeLinkedIcon: function() {\n        const iconWrapper = this.element.findOne('.ez-embed__icon-wrapper');\n\n        if (iconWrapper) {\n            iconWrapper.remove();\n        }\n    },\n\n    /**\n     * Fires the editorInteraction event so that AlloyEditor editor\n     * UI remains visible and is updated. This method also computes\n     * `selectionData.region` and the `pageX` and `pageY` properties\n     * so that the add toolbar is correctly positioned on the\n     * widget.\n     *\n     * @method fireEditorInteraction\n     * @param {Object|String} evt this initial event info object or\n     * the event name for which the `editorInteraction` is fired.\n     */\n    fireEditorInteraction: function(evt) {\n        const wrapperRegion = this.getWrapperRegion();\n        const name = evt.name || evt;\n        const event = {\n            editor: this.editor,\n            target: this.element.$,\n            name: 'widget' + name,\n            pageX: wrapperRegion.left,\n            pageY: wrapperRegion.top + wrapperRegion.height,\n        };\n\n        this.editor.focus();\n        this.focus();\n\n        this.editor.fire('editorInteraction', {\n            nativeEvent: event,\n            selectionData: {\n                element: this.element,\n                region: wrapperRegion,\n            },\n        });\n    },\n\n    /**\n     * Returns the wrapper element region.\n     *\n     * @method getWrapperRegion\n     * @private\n     * @return {Object}\n     */\n    getWrapperRegion: function() {\n        const scroll = this.wrapper.getWindow().getScrollPosition();\n        const region = this.wrapper.getClientRect();\n\n        region.top += scroll.y;\n        region.bottom += scroll.y;\n        region.left += scroll.x;\n        region.right += scroll.x;\n        region.direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;\n\n        return region;\n    },\n};\n\nexport default embedBaseDefinition;\n\n\n\n// WEBPACK FOOTER //\n// ./src/bundle/Resources/public/js/alloyeditor/src/widgets/ez-embed-base.js"],"sourceRoot":""}